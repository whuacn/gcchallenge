//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace AccessControl {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("acl_property")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class acl_property : System.Data.DataSet {
        
        private acl_propertyDataTable tableacl_property;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public acl_property() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected acl_property(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["acl_property"] != null)) {
                    base.Tables.Add(new acl_propertyDataTable(ds.Tables["acl_property"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public acl_propertyDataTable _acl_property {
            get {
                return this.tableacl_property;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            acl_property cln = ((acl_property)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["acl_property"] != null)) {
                    base.Tables.Add(new acl_propertyDataTable(ds.Tables["acl_property"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableacl_property = ((acl_propertyDataTable)(base.Tables["acl_property"]));
            if ((initTable == true)) {
                if ((this.tableacl_property != null)) {
                    this.tableacl_property.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "acl_property";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/acl_property.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableacl_property = new acl_propertyDataTable();
            base.Tables.Add(this.tableacl_property);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_acl_property() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            acl_property ds = new acl_property();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void acl_propertyRowChangeEventHandler(object sender, acl_propertyRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class acl_propertyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidx;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columnhuman_name;
            
            private System.Data.DataColumn columnnesses;
            
            private System.Data.DataColumn columnis_internal;
            
            private System.Data.DataColumn columnis_user_editable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public acl_propertyDataTable() {
                this.TableName = "acl_property";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal acl_propertyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected acl_propertyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idxColumn {
                get {
                    return this.columnidx;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn human_nameColumn {
                get {
                    return this.columnhuman_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nessesColumn {
                get {
                    return this.columnnesses;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn is_internalColumn {
                get {
                    return this.columnis_internal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn is_user_editableColumn {
                get {
                    return this.columnis_user_editable;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public acl_propertyRow this[int index] {
                get {
                    return ((acl_propertyRow)(this.Rows[index]));
                }
            }
            
            public event acl_propertyRowChangeEventHandler acl_propertyRowChanging;
            
            public event acl_propertyRowChangeEventHandler acl_propertyRowChanged;
            
            public event acl_propertyRowChangeEventHandler acl_propertyRowDeleting;
            
            public event acl_propertyRowChangeEventHandler acl_propertyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addacl_propertyRow(acl_propertyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public acl_propertyRow Addacl_propertyRow(string name, string human_name, bool nesses, bool is_internal, bool is_user_editable) {
                acl_propertyRow rowacl_propertyRow = ((acl_propertyRow)(this.NewRow()));
                rowacl_propertyRow.ItemArray = new object[] {
                        null,
                        name,
                        human_name,
                        nesses,
                        is_internal,
                        is_user_editable};
                this.Rows.Add(rowacl_propertyRow);
                return rowacl_propertyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public acl_propertyRow FindByidx(int idx) {
                return ((acl_propertyRow)(this.Rows.Find(new object[] {
                            idx})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                acl_propertyDataTable cln = ((acl_propertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new acl_propertyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidx = base.Columns["idx"];
                this.columnname = base.Columns["name"];
                this.columnhuman_name = base.Columns["human_name"];
                this.columnnesses = base.Columns["nesses"];
                this.columnis_internal = base.Columns["is_internal"];
                this.columnis_user_editable = base.Columns["is_user_editable"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidx = new System.Data.DataColumn("idx", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidx);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnhuman_name = new System.Data.DataColumn("human_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnhuman_name);
                this.columnnesses = new System.Data.DataColumn("nesses", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnesses);
                this.columnis_internal = new System.Data.DataColumn("is_internal", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnis_internal);
                this.columnis_user_editable = new System.Data.DataColumn("is_user_editable", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnis_user_editable);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidx}, true));
                this.columnidx.AutoIncrement = true;
                this.columnidx.AllowDBNull = false;
                this.columnidx.ReadOnly = true;
                this.columnidx.Unique = true;
                this.columnname.MaxLength = 50;
                this.columnhuman_name.MaxLength = 32;
                this.ExtendedProperties.Add("Generator_TablePropName", "_acl_property");
                this.ExtendedProperties.Add("Generator_UserTableName", "acl_property");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public acl_propertyRow Newacl_propertyRow() {
                return ((acl_propertyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new acl_propertyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(acl_propertyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.acl_propertyRowChanged != null)) {
                    this.acl_propertyRowChanged(this, new acl_propertyRowChangeEvent(((acl_propertyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.acl_propertyRowChanging != null)) {
                    this.acl_propertyRowChanging(this, new acl_propertyRowChangeEvent(((acl_propertyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.acl_propertyRowDeleted != null)) {
                    this.acl_propertyRowDeleted(this, new acl_propertyRowChangeEvent(((acl_propertyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.acl_propertyRowDeleting != null)) {
                    this.acl_propertyRowDeleting(this, new acl_propertyRowChangeEvent(((acl_propertyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeacl_propertyRow(acl_propertyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                acl_property ds = new acl_property();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "acl_propertyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class acl_propertyRow : System.Data.DataRow {
            
            private acl_propertyDataTable tableacl_property;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal acl_propertyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableacl_property = ((acl_propertyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idx {
                get {
                    return ((int)(this[this.tableacl_property.idxColumn]));
                }
                set {
                    this[this.tableacl_property.idxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableacl_property.nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'name\' in table \'acl_property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableacl_property.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string human_name {
                get {
                    try {
                        return ((string)(this[this.tableacl_property.human_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'human_name\' in table \'acl_property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableacl_property.human_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool nesses {
                get {
                    try {
                        return ((bool)(this[this.tableacl_property.nessesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'nesses\' in table \'acl_property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableacl_property.nessesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool is_internal {
                get {
                    try {
                        return ((bool)(this[this.tableacl_property.is_internalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'is_internal\' in table \'acl_property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableacl_property.is_internalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool is_user_editable {
                get {
                    try {
                        return ((bool)(this[this.tableacl_property.is_user_editableColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'is_user_editable\' in table \'acl_property\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableacl_property.is_user_editableColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableacl_property.nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableacl_property.nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishuman_nameNull() {
                return this.IsNull(this.tableacl_property.human_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethuman_nameNull() {
                this[this.tableacl_property.human_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnessesNull() {
                return this.IsNull(this.tableacl_property.nessesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnessesNull() {
                this[this.tableacl_property.nessesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isis_internalNull() {
                return this.IsNull(this.tableacl_property.is_internalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setis_internalNull() {
                this[this.tableacl_property.is_internalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isis_user_editableNull() {
                return this.IsNull(this.tableacl_property.is_user_editableColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setis_user_editableNull() {
                this[this.tableacl_property.is_user_editableColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class acl_propertyRowChangeEvent : System.EventArgs {
            
            private acl_propertyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public acl_propertyRowChangeEvent(acl_propertyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public acl_propertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace AccessControl.acl_propertyTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class acl_propertyTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public acl_propertyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "acl_property";
            tableMapping.ColumnMappings.Add("idx", "idx");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("human_name", "human_name");
            tableMapping.ColumnMappings.Add("nesses", "nesses");
            tableMapping.ColumnMappings.Add("is_internal", "is_internal");
            tableMapping.ColumnMappings.Add("is_user_editable", "is_user_editable");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[acl_property] ([name], [human_name], [nesses], [is_internal], [is_user_editable]) VALUES (@name, @human_name, @nesses, @is_internal, @is_user_editable);
SELECT idx, name, human_name, nesses, is_internal, is_user_editable FROM acl_property WHERE (idx = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@human_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "human_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nesses", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "nesses", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@is_internal", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "is_internal", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@is_user_editable", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "is_user_editable", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::AccessControl.Properties.Settings.Default.GmatClubChallengeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     idx, name, human_name, nesses, is_internal, is_user_editable\r\nFROM    " +
                "     acl_property\r\nORDER BY idx";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM acl_property\r\nWHERE     (idx = @Original_idx)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idx", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "idx", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT     idx, name, human_name, nesses, is_internal, is_user_editable\r\nFROM    " +
                "     acl_property\r\nWHERE     acl_property.name LIKE @value OR\r\n                 " +
                "     acl_property.human_name like @value\r\nORDER BY idx";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@value", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"INSERT INTO [dbo].[acl_property] ([name], [human_name], [nesses], [is_internal], [is_user_editable]) VALUES (@name, @human_name, @nesses, @is_internal, @is_user_editable);
SELECT idx, name, human_name, nesses, is_internal, is_user_editable FROM acl_property WHERE (idx = SCOPE_IDENTITY())

insert into acl_property_group (prop_idx,group_name) select IDENT_CURRENT('acl_property'),'user_props';";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@human_name", System.Data.SqlDbType.VarChar, 32, System.Data.ParameterDirection.Input, 0, 0, "human_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@nesses", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "nesses", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@is_internal", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "is_internal", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@is_user_editable", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "is_user_editable", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "UPDATE    acl_property\r\nSET              name = @name, human_name =@human_name, n" +
                "esses = @nesses, is_internal = @is_internal, is_user_editable = @is_user_editabl" +
                "e where idx=@Original_idx;";
            this._commandCollection[4].CommandType = System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@human_name", System.Data.SqlDbType.VarChar, 32, System.Data.ParameterDirection.Input, 0, 0, "human_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@nesses", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "nesses", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@is_internal", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "is_internal", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@is_user_editable", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "is_user_editable", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idx", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "idx", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(acl_property.acl_propertyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual acl_property.acl_propertyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            acl_property.acl_propertyDataTable dataTable = new acl_property.acl_propertyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(acl_property.acl_propertyDataTable dataTable, string value) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((value == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(value));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual acl_property.acl_propertyDataTable GetDataWithFilter(string value) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((value == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(value));
            }
            acl_property.acl_propertyDataTable dataTable = new acl_property.acl_propertyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(acl_property.acl_propertyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(acl_property dataSet) {
            return this.Adapter.Update(dataSet, "acl_property");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string name, string human_name, System.Nullable<bool> nesses, System.Nullable<bool> is_internal, System.Nullable<bool> is_user_editable) {
            if ((name == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(name));
            }
            if ((human_name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(human_name));
            }
            if ((nesses.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(nesses.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((is_internal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(is_internal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((is_user_editable.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(is_user_editable.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteProperty(int Original_idx) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(Original_idx));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertPropertyAdv(string name, string human_name, System.Nullable<bool> nesses, System.Nullable<bool> is_internal, System.Nullable<bool> is_user_editable) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((name == null)) {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(name));
            }
            if ((human_name == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(human_name));
            }
            if ((nesses.HasValue == true)) {
                command.Parameters[2].Value = ((bool)(nesses.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((is_internal.HasValue == true)) {
                command.Parameters[3].Value = ((bool)(is_internal.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((is_user_editable.HasValue == true)) {
                command.Parameters[4].Value = ((bool)(is_user_editable.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateProperty(string name, string human_name, System.Nullable<bool> nesses, System.Nullable<bool> is_internal, System.Nullable<bool> is_user_editable, int Original_idx) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((name == null)) {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(name));
            }
            if ((human_name == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(human_name));
            }
            if ((nesses.HasValue == true)) {
                command.Parameters[2].Value = ((bool)(nesses.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((is_internal.HasValue == true)) {
                command.Parameters[3].Value = ((bool)(is_internal.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((is_user_editable.HasValue == true)) {
                command.Parameters[4].Value = ((bool)(is_user_editable.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            command.Parameters[5].Value = ((int)(Original_idx));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591