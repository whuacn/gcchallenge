//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GmatClubTest.Data {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("QuestionSetsResultDetailsSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class QuestionSetsResultDetailsSet : System.Data.DataSet {
        
        private QuestionSetsDataTable tableQuestionSets;
        
        private AnswersDataTable tableAnswers;
        
        private System.Data.DataRelation relationQuestionSetsAnswers;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public QuestionSetsResultDetailsSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected QuestionSetsResultDetailsSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["QuestionSets"] != null)) {
                    base.Tables.Add(new QuestionSetsDataTable(ds.Tables["QuestionSets"]));
                }
                if ((ds.Tables["Answers"] != null)) {
                    base.Tables.Add(new AnswersDataTable(ds.Tables["Answers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuestionSetsDataTable QuestionSets {
            get {
                return this.tableQuestionSets;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnswersDataTable Answers {
            get {
                return this.tableAnswers;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            QuestionSetsResultDetailsSet cln = ((QuestionSetsResultDetailsSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["QuestionSets"] != null)) {
                    base.Tables.Add(new QuestionSetsDataTable(ds.Tables["QuestionSets"]));
                }
                if ((ds.Tables["Answers"] != null)) {
                    base.Tables.Add(new AnswersDataTable(ds.Tables["Answers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableQuestionSets = ((QuestionSetsDataTable)(base.Tables["QuestionSets"]));
            if ((initTable == true)) {
                if ((this.tableQuestionSets != null)) {
                    this.tableQuestionSets.InitVars();
                }
            }
            this.tableAnswers = ((AnswersDataTable)(base.Tables["Answers"]));
            if ((initTable == true)) {
                if ((this.tableAnswers != null)) {
                    this.tableAnswers.InitVars();
                }
            }
            this.relationQuestionSetsAnswers = this.Relations["QuestionSetsAnswers"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "QuestionSetsResultDetailsSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/QuestionSetsResultDetailsSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableQuestionSets = new QuestionSetsDataTable();
            base.Tables.Add(this.tableQuestionSets);
            this.tableAnswers = new AnswersDataTable();
            base.Tables.Add(this.tableAnswers);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("QuestionSetsAnswers", new System.Data.DataColumn[] {
                        this.tableQuestionSets.IdColumn}, new System.Data.DataColumn[] {
                        this.tableAnswers.SetIdColumn});
            this.tableAnswers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationQuestionSetsAnswers = new System.Data.DataRelation("QuestionSetsAnswers", new System.Data.DataColumn[] {
                        this.tableQuestionSets.IdColumn}, new System.Data.DataColumn[] {
                        this.tableAnswers.SetIdColumn}, false);
            this.Relations.Add(this.relationQuestionSetsAnswers);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQuestionSets() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAnswers() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            QuestionSetsResultDetailsSet ds = new QuestionSetsResultDetailsSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void QuestionSetsRowChangeEventHandler(object sender, QuestionSetsRowChangeEvent e);
        
        public delegate void AnswersRowChangeEventHandler(object sender, AnswersRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QuestionSetsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnNumberOfQuestionsToPick;
            
            private System.Data.DataColumn columnTimeLimit;
            
            private System.Data.DataColumn columnQuestionTypeId;
            
            private System.Data.DataColumn columnQuestionSubtypeId;
            
            private System.Data.DataColumn columnNumberOfQuestionsInZone1;
            
            private System.Data.DataColumn columnNumberOfQuestionsInZone2;
            
            private System.Data.DataColumn columnNumberOfQuestionsInZone3;
            
            private System.Data.DataColumn columnScore;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsDataTable() {
                this.TableName = "QuestionSets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuestionSetsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QuestionSetsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfQuestionsToPickColumn {
                get {
                    return this.columnNumberOfQuestionsToPick;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeLimitColumn {
                get {
                    return this.columnTimeLimit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionTypeIdColumn {
                get {
                    return this.columnQuestionTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionSubtypeIdColumn {
                get {
                    return this.columnQuestionSubtypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfQuestionsInZone1Column {
                get {
                    return this.columnNumberOfQuestionsInZone1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfQuestionsInZone2Column {
                get {
                    return this.columnNumberOfQuestionsInZone2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfQuestionsInZone3Column {
                get {
                    return this.columnNumberOfQuestionsInZone3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScoreColumn {
                get {
                    return this.columnScore;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRow this[int index] {
                get {
                    return ((QuestionSetsRow)(this.Rows[index]));
                }
            }
            
            public event QuestionSetsRowChangeEventHandler QuestionSetsRowChanging;
            
            public event QuestionSetsRowChangeEventHandler QuestionSetsRowChanged;
            
            public event QuestionSetsRowChangeEventHandler QuestionSetsRowDeleting;
            
            public event QuestionSetsRowChangeEventHandler QuestionSetsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQuestionSetsRow(QuestionSetsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRow AddQuestionSetsRow(string Name, string Description, int NumberOfQuestionsToPick, int TimeLimit, int QuestionTypeId, int QuestionSubtypeId, int NumberOfQuestionsInZone1, int NumberOfQuestionsInZone2, int NumberOfQuestionsInZone3, double Score) {
                QuestionSetsRow rowQuestionSetsRow = ((QuestionSetsRow)(this.NewRow()));
                rowQuestionSetsRow.ItemArray = new object[] {
                        null,
                        Name,
                        Description,
                        NumberOfQuestionsToPick,
                        TimeLimit,
                        QuestionTypeId,
                        QuestionSubtypeId,
                        NumberOfQuestionsInZone1,
                        NumberOfQuestionsInZone2,
                        NumberOfQuestionsInZone3,
                        Score};
                this.Rows.Add(rowQuestionSetsRow);
                return rowQuestionSetsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRow FindById(int Id) {
                return ((QuestionSetsRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                QuestionSetsDataTable cln = ((QuestionSetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new QuestionSetsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnNumberOfQuestionsToPick = base.Columns["NumberOfQuestionsToPick"];
                this.columnTimeLimit = base.Columns["TimeLimit"];
                this.columnQuestionTypeId = base.Columns["QuestionTypeId"];
                this.columnQuestionSubtypeId = base.Columns["QuestionSubtypeId"];
                this.columnNumberOfQuestionsInZone1 = base.Columns["NumberOfQuestionsInZone1"];
                this.columnNumberOfQuestionsInZone2 = base.Columns["NumberOfQuestionsInZone2"];
                this.columnNumberOfQuestionsInZone3 = base.Columns["NumberOfQuestionsInZone3"];
                this.columnScore = base.Columns["Score"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnNumberOfQuestionsToPick = new System.Data.DataColumn("NumberOfQuestionsToPick", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfQuestionsToPick);
                this.columnTimeLimit = new System.Data.DataColumn("TimeLimit", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeLimit);
                this.columnQuestionTypeId = new System.Data.DataColumn("QuestionTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionTypeId);
                this.columnQuestionSubtypeId = new System.Data.DataColumn("QuestionSubtypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionSubtypeId);
                this.columnNumberOfQuestionsInZone1 = new System.Data.DataColumn("NumberOfQuestionsInZone1", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfQuestionsInZone1);
                this.columnNumberOfQuestionsInZone2 = new System.Data.DataColumn("NumberOfQuestionsInZone2", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfQuestionsInZone2);
                this.columnNumberOfQuestionsInZone3 = new System.Data.DataColumn("NumberOfQuestionsInZone3", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfQuestionsInZone3);
                this.columnScore = new System.Data.DataColumn("Score", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScore);
                this.Constraints.Add(new System.Data.UniqueConstraint("QuestionSetsResultDetailsSetKey1", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnNumberOfQuestionsToPick.AllowDBNull = false;
                this.columnNumberOfQuestionsInZone1.AllowDBNull = false;
                this.columnNumberOfQuestionsInZone2.AllowDBNull = false;
                this.columnNumberOfQuestionsInZone3.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRow NewQuestionSetsRow() {
                return ((QuestionSetsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new QuestionSetsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(QuestionSetsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuestionSetsRowChanged != null)) {
                    this.QuestionSetsRowChanged(this, new QuestionSetsRowChangeEvent(((QuestionSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuestionSetsRowChanging != null)) {
                    this.QuestionSetsRowChanging(this, new QuestionSetsRowChangeEvent(((QuestionSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuestionSetsRowDeleted != null)) {
                    this.QuestionSetsRowDeleted(this, new QuestionSetsRowChangeEvent(((QuestionSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuestionSetsRowDeleting != null)) {
                    this.QuestionSetsRowDeleting(this, new QuestionSetsRowChangeEvent(((QuestionSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQuestionSetsRow(QuestionSetsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                QuestionSetsResultDetailsSet ds = new QuestionSetsResultDetailsSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QuestionSetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnswersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIsCorrect;
            
            private System.Data.DataColumn columnQuestionId;
            
            private System.Data.DataColumn columnQuestionOrder;
            
            private System.Data.DataColumn columnQuestionText;
            
            private System.Data.DataColumn columnQuestionDifficultyLevel;
            
            private System.Data.DataColumn columnSetId;
            
            private System.Data.DataColumn columnId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersDataTable() {
                this.TableName = "Answers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnswersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AnswersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsCorrectColumn {
                get {
                    return this.columnIsCorrect;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionIdColumn {
                get {
                    return this.columnQuestionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionOrderColumn {
                get {
                    return this.columnQuestionOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionTextColumn {
                get {
                    return this.columnQuestionText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionDifficultyLevelColumn {
                get {
                    return this.columnQuestionDifficultyLevel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SetIdColumn {
                get {
                    return this.columnSetId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow this[int index] {
                get {
                    return ((AnswersRow)(this.Rows[index]));
                }
            }
            
            public event AnswersRowChangeEventHandler AnswersRowChanging;
            
            public event AnswersRowChangeEventHandler AnswersRowChanged;
            
            public event AnswersRowChangeEventHandler AnswersRowDeleting;
            
            public event AnswersRowChangeEventHandler AnswersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAnswersRow(AnswersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow AddAnswersRow(bool IsCorrect, int QuestionId, byte QuestionOrder, string QuestionText, string QuestionDifficultyLevel, QuestionSetsRow parentQuestionSetsRowByQuestionSetsAnswers) {
                AnswersRow rowAnswersRow = ((AnswersRow)(this.NewRow()));
                rowAnswersRow.ItemArray = new object[] {
                        IsCorrect,
                        QuestionId,
                        QuestionOrder,
                        QuestionText,
                        QuestionDifficultyLevel,
                        parentQuestionSetsRowByQuestionSetsAnswers[0],
                        null};
                this.Rows.Add(rowAnswersRow);
                return rowAnswersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AnswersDataTable cln = ((AnswersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AnswersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsCorrect = base.Columns["IsCorrect"];
                this.columnQuestionId = base.Columns["QuestionId"];
                this.columnQuestionOrder = base.Columns["QuestionOrder"];
                this.columnQuestionText = base.Columns["QuestionText"];
                this.columnQuestionDifficultyLevel = base.Columns["QuestionDifficultyLevel"];
                this.columnSetId = base.Columns["SetId"];
                this.columnId = base.Columns["Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsCorrect = new System.Data.DataColumn("IsCorrect", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCorrect);
                this.columnQuestionId = new System.Data.DataColumn("QuestionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionId);
                this.columnQuestionOrder = new System.Data.DataColumn("QuestionOrder", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionOrder);
                this.columnQuestionText = new System.Data.DataColumn("QuestionText", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionText);
                this.columnQuestionDifficultyLevel = new System.Data.DataColumn("QuestionDifficultyLevel", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionDifficultyLevel);
                this.columnSetId = new System.Data.DataColumn("SetId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetId);
                this.columnId = new System.Data.DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnIsCorrect.AllowDBNull = false;
                this.columnQuestionId.AllowDBNull = false;
                this.columnQuestionOrder.AllowDBNull = false;
                this.columnQuestionText.AllowDBNull = false;
                this.columnQuestionDifficultyLevel.AllowDBNull = false;
                this.columnSetId.AllowDBNull = false;
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow NewAnswersRow() {
                return ((AnswersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AnswersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AnswersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnswersRowChanged != null)) {
                    this.AnswersRowChanged(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnswersRowChanging != null)) {
                    this.AnswersRowChanging(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnswersRowDeleted != null)) {
                    this.AnswersRowDeleted(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnswersRowDeleting != null)) {
                    this.AnswersRowDeleting(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAnswersRow(AnswersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                QuestionSetsResultDetailsSet ds = new QuestionSetsResultDetailsSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnswersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QuestionSetsRow : System.Data.DataRow {
            
            private QuestionSetsDataTable tableQuestionSets;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuestionSetsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuestionSets = ((QuestionSetsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableQuestionSets.IdColumn]));
                }
                set {
                    this[this.tableQuestionSets.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableQuestionSets.NameColumn]));
                }
                set {
                    this[this.tableQuestionSets.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableQuestionSets.DescriptionColumn]));
                }
                set {
                    this[this.tableQuestionSets.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumberOfQuestionsToPick {
                get {
                    return ((int)(this[this.tableQuestionSets.NumberOfQuestionsToPickColumn]));
                }
                set {
                    this[this.tableQuestionSets.NumberOfQuestionsToPickColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimeLimit {
                get {
                    try {
                        return ((int)(this[this.tableQuestionSets.TimeLimitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeLimit\' in table \'QuestionSets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestionSets.TimeLimitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuestionTypeId {
                get {
                    try {
                        return ((int)(this[this.tableQuestionSets.QuestionTypeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QuestionTypeId\' in table \'QuestionSets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestionSets.QuestionTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuestionSubtypeId {
                get {
                    try {
                        return ((int)(this[this.tableQuestionSets.QuestionSubtypeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QuestionSubtypeId\' in table \'QuestionSets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestionSets.QuestionSubtypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumberOfQuestionsInZone1 {
                get {
                    return ((int)(this[this.tableQuestionSets.NumberOfQuestionsInZone1Column]));
                }
                set {
                    this[this.tableQuestionSets.NumberOfQuestionsInZone1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumberOfQuestionsInZone2 {
                get {
                    return ((int)(this[this.tableQuestionSets.NumberOfQuestionsInZone2Column]));
                }
                set {
                    this[this.tableQuestionSets.NumberOfQuestionsInZone2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumberOfQuestionsInZone3 {
                get {
                    return ((int)(this[this.tableQuestionSets.NumberOfQuestionsInZone3Column]));
                }
                set {
                    this[this.tableQuestionSets.NumberOfQuestionsInZone3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Score {
                get {
                    try {
                        return ((double)(this[this.tableQuestionSets.ScoreColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Score\' in table \'QuestionSets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestionSets.ScoreColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeLimitNull() {
                return this.IsNull(this.tableQuestionSets.TimeLimitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeLimitNull() {
                this[this.tableQuestionSets.TimeLimitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuestionTypeIdNull() {
                return this.IsNull(this.tableQuestionSets.QuestionTypeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuestionTypeIdNull() {
                this[this.tableQuestionSets.QuestionTypeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuestionSubtypeIdNull() {
                return this.IsNull(this.tableQuestionSets.QuestionSubtypeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuestionSubtypeIdNull() {
                this[this.tableQuestionSets.QuestionSubtypeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScoreNull() {
                return this.IsNull(this.tableQuestionSets.ScoreColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScoreNull() {
                this[this.tableQuestionSets.ScoreColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow[] GetAnswersRows() {
                return ((AnswersRow[])(base.GetChildRows(this.Table.ChildRelations["QuestionSetsAnswers"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AnswersRow : System.Data.DataRow {
            
            private AnswersDataTable tableAnswers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnswersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnswers = ((AnswersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCorrect {
                get {
                    return ((bool)(this[this.tableAnswers.IsCorrectColumn]));
                }
                set {
                    this[this.tableAnswers.IsCorrectColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuestionId {
                get {
                    return ((int)(this[this.tableAnswers.QuestionIdColumn]));
                }
                set {
                    this[this.tableAnswers.QuestionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte QuestionOrder {
                get {
                    return ((byte)(this[this.tableAnswers.QuestionOrderColumn]));
                }
                set {
                    this[this.tableAnswers.QuestionOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QuestionText {
                get {
                    return ((string)(this[this.tableAnswers.QuestionTextColumn]));
                }
                set {
                    this[this.tableAnswers.QuestionTextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QuestionDifficultyLevel {
                get {
                    return ((string)(this[this.tableAnswers.QuestionDifficultyLevelColumn]));
                }
                set {
                    this[this.tableAnswers.QuestionDifficultyLevelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SetId {
                get {
                    return ((int)(this[this.tableAnswers.SetIdColumn]));
                }
                set {
                    this[this.tableAnswers.SetIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableAnswers.IdColumn]));
                }
                set {
                    this[this.tableAnswers.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRow QuestionSetsRow {
                get {
                    return ((QuestionSetsRow)(this.GetParentRow(this.Table.ParentRelations["QuestionSetsAnswers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["QuestionSetsAnswers"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QuestionSetsRowChangeEvent : System.EventArgs {
            
            private QuestionSetsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRowChangeEvent(QuestionSetsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AnswersRowChangeEvent : System.EventArgs {
            
            private AnswersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRowChangeEvent(AnswersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591