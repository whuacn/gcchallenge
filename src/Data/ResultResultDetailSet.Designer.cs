//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GmatClubTest.Data {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ResultResultDetailSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ResultResultDetailSet : System.Data.DataSet {
        
        private ResultsDataTable tableResults;
        
        private ResultsDetailsDataTable tableResultsDetails;
        
        private ResultsDetailsOfSetsDataTable tableResultsDetailsOfSets;
        
        private System.Data.DataRelation relationResultsResultsDetails;
        
        private System.Data.DataRelation relationResultsResultsDetailsOfSets;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ResultResultDetailSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ResultResultDetailSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Results"] != null)) {
                    base.Tables.Add(new ResultsDataTable(ds.Tables["Results"]));
                }
                if ((ds.Tables["ResultsDetails"] != null)) {
                    base.Tables.Add(new ResultsDetailsDataTable(ds.Tables["ResultsDetails"]));
                }
                if ((ds.Tables["ResultsDetailsOfSets"] != null)) {
                    base.Tables.Add(new ResultsDetailsOfSetsDataTable(ds.Tables["ResultsDetailsOfSets"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResultsDataTable Results {
            get {
                return this.tableResults;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResultsDetailsDataTable ResultsDetails {
            get {
                return this.tableResultsDetails;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResultsDetailsOfSetsDataTable ResultsDetailsOfSets {
            get {
                return this.tableResultsDetailsOfSets;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ResultResultDetailSet cln = ((ResultResultDetailSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Results"] != null)) {
                    base.Tables.Add(new ResultsDataTable(ds.Tables["Results"]));
                }
                if ((ds.Tables["ResultsDetails"] != null)) {
                    base.Tables.Add(new ResultsDetailsDataTable(ds.Tables["ResultsDetails"]));
                }
                if ((ds.Tables["ResultsDetailsOfSets"] != null)) {
                    base.Tables.Add(new ResultsDetailsOfSetsDataTable(ds.Tables["ResultsDetailsOfSets"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableResults = ((ResultsDataTable)(base.Tables["Results"]));
            if ((initTable == true)) {
                if ((this.tableResults != null)) {
                    this.tableResults.InitVars();
                }
            }
            this.tableResultsDetails = ((ResultsDetailsDataTable)(base.Tables["ResultsDetails"]));
            if ((initTable == true)) {
                if ((this.tableResultsDetails != null)) {
                    this.tableResultsDetails.InitVars();
                }
            }
            this.tableResultsDetailsOfSets = ((ResultsDetailsOfSetsDataTable)(base.Tables["ResultsDetailsOfSets"]));
            if ((initTable == true)) {
                if ((this.tableResultsDetailsOfSets != null)) {
                    this.tableResultsDetailsOfSets.InitVars();
                }
            }
            this.relationResultsResultsDetails = this.Relations["ResultsResultsDetails"];
            this.relationResultsResultsDetailsOfSets = this.Relations["ResultsResultsDetailsOfSets"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ResultResultDetailSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ResultResultDetailSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableResults = new ResultsDataTable();
            base.Tables.Add(this.tableResults);
            this.tableResultsDetails = new ResultsDetailsDataTable();
            base.Tables.Add(this.tableResultsDetails);
            this.tableResultsDetailsOfSets = new ResultsDetailsOfSetsDataTable();
            base.Tables.Add(this.tableResultsDetailsOfSets);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("ResultsResultsDetails", new System.Data.DataColumn[] {
                        this.tableResults.IdColumn}, new System.Data.DataColumn[] {
                        this.tableResultsDetails.ResultIdColumn});
            this.tableResultsDetails.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ResultsResultsDetailsOfSets", new System.Data.DataColumn[] {
                        this.tableResults.IdColumn}, new System.Data.DataColumn[] {
                        this.tableResultsDetailsOfSets.ResultIdColumn});
            this.tableResultsDetailsOfSets.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationResultsResultsDetails = new System.Data.DataRelation("ResultsResultsDetails", new System.Data.DataColumn[] {
                        this.tableResults.IdColumn}, new System.Data.DataColumn[] {
                        this.tableResultsDetails.ResultIdColumn}, false);
            this.Relations.Add(this.relationResultsResultsDetails);
            this.relationResultsResultsDetailsOfSets = new System.Data.DataRelation("ResultsResultsDetailsOfSets", new System.Data.DataColumn[] {
                        this.tableResults.IdColumn}, new System.Data.DataColumn[] {
                        this.tableResultsDetailsOfSets.ResultIdColumn}, false);
            this.Relations.Add(this.relationResultsResultsDetailsOfSets);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeResults() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeResultsDetails() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeResultsDetailsOfSets() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ResultResultDetailSet ds = new ResultResultDetailSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ResultsRowChangeEventHandler(object sender, ResultsRowChangeEvent e);
        
        public delegate void ResultsDetailsRowChangeEventHandler(object sender, ResultsDetailsRowChangeEvent e);
        
        public delegate void ResultsDetailsOfSetsRowChangeEventHandler(object sender, ResultsDetailsOfSetsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResultsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnTestId;
            
            private System.Data.DataColumn columnStartTime;
            
            private System.Data.DataColumn columnEndTime;
            
            private System.Data.DataColumn columnScore;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDataTable() {
                this.TableName = "Results";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResultsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ResultsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TestIdColumn {
                get {
                    return this.columnTestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StartTimeColumn {
                get {
                    return this.columnStartTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EndTimeColumn {
                get {
                    return this.columnEndTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScoreColumn {
                get {
                    return this.columnScore;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsRow this[int index] {
                get {
                    return ((ResultsRow)(this.Rows[index]));
                }
            }
            
            public event ResultsRowChangeEventHandler ResultsRowChanging;
            
            public event ResultsRowChangeEventHandler ResultsRowChanged;
            
            public event ResultsRowChangeEventHandler ResultsRowDeleting;
            
            public event ResultsRowChangeEventHandler ResultsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddResultsRow(ResultsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsRow AddResultsRow(int UserId, int TestId, System.DateTime StartTime, System.DateTime EndTime, double Score) {
                ResultsRow rowResultsRow = ((ResultsRow)(this.NewRow()));
                rowResultsRow.ItemArray = new object[] {
                        null,
                        UserId,
                        TestId,
                        StartTime,
                        EndTime,
                        Score};
                this.Rows.Add(rowResultsRow);
                return rowResultsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsRow FindById(int Id) {
                return ((ResultsRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ResultsDataTable cln = ((ResultsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ResultsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnUserId = base.Columns["UserId"];
                this.columnTestId = base.Columns["TestId"];
                this.columnStartTime = base.Columns["StartTime"];
                this.columnEndTime = base.Columns["EndTime"];
                this.columnScore = base.Columns["Score"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnTestId = new System.Data.DataColumn("TestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestId);
                this.columnStartTime = new System.Data.DataColumn("StartTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartTime);
                this.columnEndTime = new System.Data.DataColumn("EndTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndTime);
                this.columnScore = new System.Data.DataColumn("Score", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScore);
                this.Constraints.Add(new System.Data.UniqueConstraint("ResultResultDetailSetKey1", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnUserId.AllowDBNull = false;
                this.columnTestId.AllowDBNull = false;
                this.columnStartTime.AllowDBNull = false;
                this.columnEndTime.AllowDBNull = false;
                this.columnScore.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsRow NewResultsRow() {
                return ((ResultsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ResultsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ResultsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResultsRowChanged != null)) {
                    this.ResultsRowChanged(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResultsRowChanging != null)) {
                    this.ResultsRowChanging(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResultsRowDeleted != null)) {
                    this.ResultsRowDeleted(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResultsRowDeleting != null)) {
                    this.ResultsRowDeleting(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveResultsRow(ResultsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ResultResultDetailSet ds = new ResultResultDetailSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResultsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResultsDetailsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnResultId;
            
            private System.Data.DataColumn columnQuestionId;
            
            private System.Data.DataColumn columnAnswerId;
            
            private System.Data.DataColumn columnQuestionOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsDataTable() {
                this.TableName = "ResultsDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResultsDetailsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ResultsDetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResultIdColumn {
                get {
                    return this.columnResultId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionIdColumn {
                get {
                    return this.columnQuestionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AnswerIdColumn {
                get {
                    return this.columnAnswerId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionOrderColumn {
                get {
                    return this.columnQuestionOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsRow this[int index] {
                get {
                    return ((ResultsDetailsRow)(this.Rows[index]));
                }
            }
            
            public event ResultsDetailsRowChangeEventHandler ResultsDetailsRowChanging;
            
            public event ResultsDetailsRowChangeEventHandler ResultsDetailsRowChanged;
            
            public event ResultsDetailsRowChangeEventHandler ResultsDetailsRowDeleting;
            
            public event ResultsDetailsRowChangeEventHandler ResultsDetailsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddResultsDetailsRow(ResultsDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsRow AddResultsDetailsRow(ResultsRow parentResultsRowByResultsResultsDetails, int QuestionId, int AnswerId, byte QuestionOrder) {
                ResultsDetailsRow rowResultsDetailsRow = ((ResultsDetailsRow)(this.NewRow()));
                rowResultsDetailsRow.ItemArray = new object[] {
                        parentResultsRowByResultsResultsDetails[0],
                        QuestionId,
                        AnswerId,
                        QuestionOrder};
                this.Rows.Add(rowResultsDetailsRow);
                return rowResultsDetailsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsRow FindByResultIdQuestionId(int ResultId, int QuestionId) {
                return ((ResultsDetailsRow)(this.Rows.Find(new object[] {
                            ResultId,
                            QuestionId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ResultsDetailsDataTable cln = ((ResultsDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ResultsDetailsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnResultId = base.Columns["ResultId"];
                this.columnQuestionId = base.Columns["QuestionId"];
                this.columnAnswerId = base.Columns["AnswerId"];
                this.columnQuestionOrder = base.Columns["QuestionOrder"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnResultId = new System.Data.DataColumn("ResultId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResultId);
                this.columnQuestionId = new System.Data.DataColumn("QuestionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionId);
                this.columnAnswerId = new System.Data.DataColumn("AnswerId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnswerId);
                this.columnQuestionOrder = new System.Data.DataColumn("QuestionOrder", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionOrder);
                this.Constraints.Add(new System.Data.UniqueConstraint("ResultResultDetailSetKey2", new System.Data.DataColumn[] {
                                this.columnResultId,
                                this.columnQuestionId}, true));
                this.columnResultId.AllowDBNull = false;
                this.columnQuestionId.AllowDBNull = false;
                this.columnQuestionOrder.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsRow NewResultsDetailsRow() {
                return ((ResultsDetailsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ResultsDetailsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ResultsDetailsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResultsDetailsRowChanged != null)) {
                    this.ResultsDetailsRowChanged(this, new ResultsDetailsRowChangeEvent(((ResultsDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResultsDetailsRowChanging != null)) {
                    this.ResultsDetailsRowChanging(this, new ResultsDetailsRowChangeEvent(((ResultsDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResultsDetailsRowDeleted != null)) {
                    this.ResultsDetailsRowDeleted(this, new ResultsDetailsRowChangeEvent(((ResultsDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResultsDetailsRowDeleting != null)) {
                    this.ResultsDetailsRowDeleting(this, new ResultsDetailsRowChangeEvent(((ResultsDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveResultsDetailsRow(ResultsDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ResultResultDetailSet ds = new ResultResultDetailSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResultsDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResultsDetailsOfSetsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnResultId;
            
            private System.Data.DataColumn columnQuestionSetId;
            
            private System.Data.DataColumn columnScore;
            
            private System.Data.DataColumn columnQuestionSetOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsOfSetsDataTable() {
                this.TableName = "ResultsDetailsOfSets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResultsDetailsOfSetsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ResultsDetailsOfSetsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResultIdColumn {
                get {
                    return this.columnResultId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionSetIdColumn {
                get {
                    return this.columnQuestionSetId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScoreColumn {
                get {
                    return this.columnScore;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionSetOrderColumn {
                get {
                    return this.columnQuestionSetOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsOfSetsRow this[int index] {
                get {
                    return ((ResultsDetailsOfSetsRow)(this.Rows[index]));
                }
            }
            
            public event ResultsDetailsOfSetsRowChangeEventHandler ResultsDetailsOfSetsRowChanging;
            
            public event ResultsDetailsOfSetsRowChangeEventHandler ResultsDetailsOfSetsRowChanged;
            
            public event ResultsDetailsOfSetsRowChangeEventHandler ResultsDetailsOfSetsRowDeleting;
            
            public event ResultsDetailsOfSetsRowChangeEventHandler ResultsDetailsOfSetsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddResultsDetailsOfSetsRow(ResultsDetailsOfSetsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsOfSetsRow AddResultsDetailsOfSetsRow(ResultsRow parentResultsRowByResultsResultsDetailsOfSets, int QuestionSetId, double Score, byte QuestionSetOrder) {
                ResultsDetailsOfSetsRow rowResultsDetailsOfSetsRow = ((ResultsDetailsOfSetsRow)(this.NewRow()));
                rowResultsDetailsOfSetsRow.ItemArray = new object[] {
                        parentResultsRowByResultsResultsDetailsOfSets[0],
                        QuestionSetId,
                        Score,
                        QuestionSetOrder};
                this.Rows.Add(rowResultsDetailsOfSetsRow);
                return rowResultsDetailsOfSetsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsOfSetsRow FindByResultIdQuestionSetId(int ResultId, int QuestionSetId) {
                return ((ResultsDetailsOfSetsRow)(this.Rows.Find(new object[] {
                            ResultId,
                            QuestionSetId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ResultsDetailsOfSetsDataTable cln = ((ResultsDetailsOfSetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ResultsDetailsOfSetsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnResultId = base.Columns["ResultId"];
                this.columnQuestionSetId = base.Columns["QuestionSetId"];
                this.columnScore = base.Columns["Score"];
                this.columnQuestionSetOrder = base.Columns["QuestionSetOrder"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnResultId = new System.Data.DataColumn("ResultId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResultId);
                this.columnQuestionSetId = new System.Data.DataColumn("QuestionSetId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionSetId);
                this.columnScore = new System.Data.DataColumn("Score", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScore);
                this.columnQuestionSetOrder = new System.Data.DataColumn("QuestionSetOrder", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionSetOrder);
                this.Constraints.Add(new System.Data.UniqueConstraint("ResultResultDetailSetKey3", new System.Data.DataColumn[] {
                                this.columnResultId,
                                this.columnQuestionSetId}, true));
                this.columnResultId.AllowDBNull = false;
                this.columnQuestionSetId.AllowDBNull = false;
                this.columnScore.AllowDBNull = false;
                this.columnQuestionSetOrder.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsOfSetsRow NewResultsDetailsOfSetsRow() {
                return ((ResultsDetailsOfSetsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ResultsDetailsOfSetsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ResultsDetailsOfSetsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResultsDetailsOfSetsRowChanged != null)) {
                    this.ResultsDetailsOfSetsRowChanged(this, new ResultsDetailsOfSetsRowChangeEvent(((ResultsDetailsOfSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResultsDetailsOfSetsRowChanging != null)) {
                    this.ResultsDetailsOfSetsRowChanging(this, new ResultsDetailsOfSetsRowChangeEvent(((ResultsDetailsOfSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResultsDetailsOfSetsRowDeleted != null)) {
                    this.ResultsDetailsOfSetsRowDeleted(this, new ResultsDetailsOfSetsRowChangeEvent(((ResultsDetailsOfSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResultsDetailsOfSetsRowDeleting != null)) {
                    this.ResultsDetailsOfSetsRowDeleting(this, new ResultsDetailsOfSetsRowChangeEvent(((ResultsDetailsOfSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveResultsDetailsOfSetsRow(ResultsDetailsOfSetsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ResultResultDetailSet ds = new ResultResultDetailSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResultsDetailsOfSetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ResultsRow : System.Data.DataRow {
            
            private ResultsDataTable tableResults;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResultsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResults = ((ResultsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableResults.IdColumn]));
                }
                set {
                    this[this.tableResults.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableResults.UserIdColumn]));
                }
                set {
                    this[this.tableResults.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestId {
                get {
                    return ((int)(this[this.tableResults.TestIdColumn]));
                }
                set {
                    this[this.tableResults.TestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartTime {
                get {
                    return ((System.DateTime)(this[this.tableResults.StartTimeColumn]));
                }
                set {
                    this[this.tableResults.StartTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndTime {
                get {
                    return ((System.DateTime)(this[this.tableResults.EndTimeColumn]));
                }
                set {
                    this[this.tableResults.EndTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Score {
                get {
                    return ((double)(this[this.tableResults.ScoreColumn]));
                }
                set {
                    this[this.tableResults.ScoreColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsRow[] GetResultsDetailsRows() {
                return ((ResultsDetailsRow[])(base.GetChildRows(this.Table.ChildRelations["ResultsResultsDetails"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsOfSetsRow[] GetResultsDetailsOfSetsRows() {
                return ((ResultsDetailsOfSetsRow[])(base.GetChildRows(this.Table.ChildRelations["ResultsResultsDetailsOfSets"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ResultsDetailsRow : System.Data.DataRow {
            
            private ResultsDetailsDataTable tableResultsDetails;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResultsDetailsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResultsDetails = ((ResultsDetailsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ResultId {
                get {
                    return ((int)(this[this.tableResultsDetails.ResultIdColumn]));
                }
                set {
                    this[this.tableResultsDetails.ResultIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuestionId {
                get {
                    return ((int)(this[this.tableResultsDetails.QuestionIdColumn]));
                }
                set {
                    this[this.tableResultsDetails.QuestionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AnswerId {
                get {
                    try {
                        return ((int)(this[this.tableResultsDetails.AnswerIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AnswerId\' in table \'ResultsDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResultsDetails.AnswerIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte QuestionOrder {
                get {
                    return ((byte)(this[this.tableResultsDetails.QuestionOrderColumn]));
                }
                set {
                    this[this.tableResultsDetails.QuestionOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsRow ResultsRow {
                get {
                    return ((ResultsRow)(this.GetParentRow(this.Table.ParentRelations["ResultsResultsDetails"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ResultsResultsDetails"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnswerIdNull() {
                return this.IsNull(this.tableResultsDetails.AnswerIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnswerIdNull() {
                this[this.tableResultsDetails.AnswerIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ResultsDetailsOfSetsRow : System.Data.DataRow {
            
            private ResultsDetailsOfSetsDataTable tableResultsDetailsOfSets;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResultsDetailsOfSetsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResultsDetailsOfSets = ((ResultsDetailsOfSetsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ResultId {
                get {
                    return ((int)(this[this.tableResultsDetailsOfSets.ResultIdColumn]));
                }
                set {
                    this[this.tableResultsDetailsOfSets.ResultIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuestionSetId {
                get {
                    return ((int)(this[this.tableResultsDetailsOfSets.QuestionSetIdColumn]));
                }
                set {
                    this[this.tableResultsDetailsOfSets.QuestionSetIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Score {
                get {
                    return ((double)(this[this.tableResultsDetailsOfSets.ScoreColumn]));
                }
                set {
                    this[this.tableResultsDetailsOfSets.ScoreColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte QuestionSetOrder {
                get {
                    return ((byte)(this[this.tableResultsDetailsOfSets.QuestionSetOrderColumn]));
                }
                set {
                    this[this.tableResultsDetailsOfSets.QuestionSetOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsRow ResultsRow {
                get {
                    return ((ResultsRow)(this.GetParentRow(this.Table.ParentRelations["ResultsResultsDetailsOfSets"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ResultsResultsDetailsOfSets"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ResultsRowChangeEvent : System.EventArgs {
            
            private ResultsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsRowChangeEvent(ResultsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ResultsDetailsRowChangeEvent : System.EventArgs {
            
            private ResultsDetailsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsRowChangeEvent(ResultsDetailsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ResultsDetailsOfSetsRowChangeEvent : System.EventArgs {
            
            private ResultsDetailsOfSetsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsOfSetsRowChangeEvent(ResultsDetailsOfSetsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultsDetailsOfSetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591