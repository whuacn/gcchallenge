//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
#pragma warning disable 1591

namespace ImportExport.Data
{
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [XmlSchemaProvider("GetTypedDataSetSchema")]
    [XmlRoot("Dataset")]
    [HelpKeyword("vs.data.DataSet")]
    public partial class Dataset : DataSet
    {
        private TestsDataTable tableTests;

        private QuestionSetsDataTable tableQuestionSets;

        private TestContentsDataTable tableTestContents;

        private AnswersDataTable tableAnswers;

        private SetsToQuestionsDataTable tableSetsToQuestions;

        private QuestionsDataTable tableQuestions;

        private PassagesToQuestionsDataTable tablePassagesToQuestions;

        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        [DebuggerNonUserCode()]
        public Dataset()
        {
            BeginInit();
            InitClass();
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode()]
        protected Dataset(SerializationInfo info, StreamingContext context) :
            base(info, context, false)
        {
            if ((IsBinarySerialized(info, context) == true))
            {
                InitVars(false);
                CollectionChangeEventHandler schemaChangedHandler1 = new CollectionChangeEventHandler(SchemaChanged);
                Tables.CollectionChanged += schemaChangedHandler1;
                Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string) (info.GetValue("XmlSchema", typeof (string))));
            if ((DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema))
            {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
                if ((ds.Tables["Tests"] != null))
                {
                    base.Tables.Add(new TestsDataTable(ds.Tables["Tests"]));
                }
                if ((ds.Tables["QuestionSets"] != null))
                {
                    base.Tables.Add(new QuestionSetsDataTable(ds.Tables["QuestionSets"]));
                }
                if ((ds.Tables["TestContents"] != null))
                {
                    base.Tables.Add(new TestContentsDataTable(ds.Tables["TestContents"]));
                }
                if ((ds.Tables["Answers"] != null))
                {
                    base.Tables.Add(new AnswersDataTable(ds.Tables["Answers"]));
                }
                if ((ds.Tables["SetsToQuestions"] != null))
                {
                    base.Tables.Add(new SetsToQuestionsDataTable(ds.Tables["SetsToQuestions"]));
                }
                if ((ds.Tables["Questions"] != null))
                {
                    base.Tables.Add(new QuestionsDataTable(ds.Tables["Questions"]));
                }
                if ((ds.Tables["PassagesToQuestions"] != null))
                {
                    base.Tables.Add(new PassagesToQuestionsDataTable(ds.Tables["PassagesToQuestions"]));
                }
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
            }
            GetSerializationData(info, context);
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [DebuggerNonUserCode()]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public TestsDataTable Tests
        {
            get { return tableTests; }
        }

        [DebuggerNonUserCode()]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public QuestionSetsDataTable QuestionSets
        {
            get { return tableQuestionSets; }
        }

        [DebuggerNonUserCode()]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public TestContentsDataTable TestContents
        {
            get { return tableTestContents; }
        }

        [DebuggerNonUserCode()]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public AnswersDataTable Answers
        {
            get { return tableAnswers; }
        }

        [DebuggerNonUserCode()]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public SetsToQuestionsDataTable SetsToQuestions
        {
            get { return tableSetsToQuestions; }
        }

        [DebuggerNonUserCode()]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public QuestionsDataTable Questions
        {
            get { return tableQuestions; }
        }

        [DebuggerNonUserCode()]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public PassagesToQuestionsDataTable PassagesToQuestions
        {
            get { return tablePassagesToQuestions; }
        }

        [DebuggerNonUserCode()]
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get { return _schemaSerializationMode; }
            set { _schemaSerializationMode = value; }
        }

        [DebuggerNonUserCode()]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get { return base.Tables; }
        }

        [DebuggerNonUserCode()]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get { return base.Relations; }
        }

        [DebuggerNonUserCode()]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        public override DataSet Clone()
        {
            Dataset cln = ((Dataset) (base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        protected override void ReadXmlSerializable(XmlReader reader)
        {
            if ((DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema))
            {
                Reset();
                DataSet ds = new DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Tests"] != null))
                {
                    base.Tables.Add(new TestsDataTable(ds.Tables["Tests"]));
                }
                if ((ds.Tables["QuestionSets"] != null))
                {
                    base.Tables.Add(new QuestionSetsDataTable(ds.Tables["QuestionSets"]));
                }
                if ((ds.Tables["TestContents"] != null))
                {
                    base.Tables.Add(new TestContentsDataTable(ds.Tables["TestContents"]));
                }
                if ((ds.Tables["Answers"] != null))
                {
                    base.Tables.Add(new AnswersDataTable(ds.Tables["Answers"]));
                }
                if ((ds.Tables["SetsToQuestions"] != null))
                {
                    base.Tables.Add(new SetsToQuestionsDataTable(ds.Tables["SetsToQuestions"]));
                }
                if ((ds.Tables["Questions"] != null))
                {
                    base.Tables.Add(new QuestionsDataTable(ds.Tables["Questions"]));
                }
                if ((ds.Tables["PassagesToQuestions"] != null))
                {
                    base.Tables.Add(new PassagesToQuestionsDataTable(ds.Tables["PassagesToQuestions"]));
                }
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        protected override XmlSchema GetSchemaSerializable()
        {
            MemoryStream stream = new MemoryStream();
            WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return XmlSchema.Read(new XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        internal void InitVars(bool initTable)
        {
            tableTests = ((TestsDataTable) (base.Tables["Tests"]));
            if ((initTable == true))
            {
                if ((tableTests != null))
                {
                    tableTests.InitVars();
                }
            }
            tableQuestionSets = ((QuestionSetsDataTable) (base.Tables["QuestionSets"]));
            if ((initTable == true))
            {
                if ((tableQuestionSets != null))
                {
                    tableQuestionSets.InitVars();
                }
            }
            tableTestContents = ((TestContentsDataTable) (base.Tables["TestContents"]));
            if ((initTable == true))
            {
                if ((tableTestContents != null))
                {
                    tableTestContents.InitVars();
                }
            }
            tableAnswers = ((AnswersDataTable) (base.Tables["Answers"]));
            if ((initTable == true))
            {
                if ((tableAnswers != null))
                {
                    tableAnswers.InitVars();
                }
            }
            tableSetsToQuestions = ((SetsToQuestionsDataTable) (base.Tables["SetsToQuestions"]));
            if ((initTable == true))
            {
                if ((tableSetsToQuestions != null))
                {
                    tableSetsToQuestions.InitVars();
                }
            }
            tableQuestions = ((QuestionsDataTable) (base.Tables["Questions"]));
            if ((initTable == true))
            {
                if ((tableQuestions != null))
                {
                    tableQuestions.InitVars();
                }
            }
            tablePassagesToQuestions = ((PassagesToQuestionsDataTable) (base.Tables["PassagesToQuestions"]));
            if ((initTable == true))
            {
                if ((tablePassagesToQuestions != null))
                {
                    tablePassagesToQuestions.InitVars();
                }
            }
        }

        [DebuggerNonUserCode()]
        private void InitClass()
        {
            DataSetName = "Dataset";
            Prefix = "";
            Namespace = "http://tempuri.org/Dataset.xsd";
            EnforceConstraints = true;
            SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            tableTests = new TestsDataTable();
            base.Tables.Add(tableTests);
            tableQuestionSets = new QuestionSetsDataTable();
            base.Tables.Add(tableQuestionSets);
            tableTestContents = new TestContentsDataTable();
            base.Tables.Add(tableTestContents);
            tableAnswers = new AnswersDataTable();
            base.Tables.Add(tableAnswers);
            tableSetsToQuestions = new SetsToQuestionsDataTable();
            base.Tables.Add(tableSetsToQuestions);
            tableQuestions = new QuestionsDataTable();
            base.Tables.Add(tableQuestions);
            tablePassagesToQuestions = new PassagesToQuestionsDataTable();
            base.Tables.Add(tablePassagesToQuestions);
        }

        [DebuggerNonUserCode()]
        private bool ShouldSerializeTests()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        private bool ShouldSerializeQuestionSets()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        private bool ShouldSerializeTestContents()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        private bool ShouldSerializeAnswers()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        private bool ShouldSerializeSetsToQuestions()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        private bool ShouldSerializeQuestions()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        private bool ShouldSerializePassagesToQuestions()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        private void SchemaChanged(object sender, CollectionChangeEventArgs e)
        {
            if ((e.Action == CollectionChangeAction.Remove))
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
        {
            Dataset ds = new Dataset();
            XmlSchemaComplexType type = new XmlSchemaComplexType();
            XmlSchemaSequence sequence = new XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            XmlSchemaAny any = new XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }

        public delegate void TestsRowChangeEventHandler(object sender, TestsRowChangeEvent e);

        public delegate void QuestionSetsRowChangeEventHandler(object sender, QuestionSetsRowChangeEvent e);

        public delegate void TestContentsRowChangeEventHandler(object sender, TestContentsRowChangeEvent e);

        public delegate void AnswersRowChangeEventHandler(object sender, AnswersRowChangeEvent e);

        public delegate void SetsToQuestionsRowChangeEventHandler(object sender, SetsToQuestionsRowChangeEvent e);

        public delegate void QuestionsRowChangeEventHandler(object sender, QuestionsRowChangeEvent e);

        public delegate void PassagesToQuestionsRowChangeEventHandler(object sender, PassagesToQuestionsRowChangeEvent e
            );

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class TestsDataTable : DataTable, IEnumerable
        {
            private DataColumn columnId;

            private DataColumn columnName;

            private DataColumn columnIsPractice;

            private DataColumn columnDescription;

            private DataColumn columnQuestionTypeId;

            private DataColumn columnQuestionSubtypeId;

            private DataColumn columnGUID;

            private DataColumn columnVersion;

            [DebuggerNonUserCode()]
            public TestsDataTable()
            {
                TableName = "Tests";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            internal TestsDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            protected TestsDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            public DataColumn IdColumn
            {
                get { return columnId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn NameColumn
            {
                get { return columnName; }
            }

            [DebuggerNonUserCode()]
            public DataColumn IsPracticeColumn
            {
                get { return columnIsPractice; }
            }

            [DebuggerNonUserCode()]
            public DataColumn DescriptionColumn
            {
                get { return columnDescription; }
            }

            [DebuggerNonUserCode()]
            public DataColumn QuestionTypeIdColumn
            {
                get { return columnQuestionTypeId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn QuestionSubtypeIdColumn
            {
                get { return columnQuestionSubtypeId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn GUIDColumn
            {
                get { return columnGUID; }
            }

            [DebuggerNonUserCode()]
            public DataColumn VersionColumn
            {
                get { return columnVersion; }
            }

            [DebuggerNonUserCode()]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode()]
            public TestsRow this[int index]
            {
                get { return ((TestsRow) (Rows[index])); }
            }

            public event TestsRowChangeEventHandler TestsRowChanging;

            public event TestsRowChangeEventHandler TestsRowChanged;

            public event TestsRowChangeEventHandler TestsRowDeleting;

            public event TestsRowChangeEventHandler TestsRowDeleted;

            [DebuggerNonUserCode()]
            public void AddTestsRow(TestsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            public TestsRow AddTestsRow(string Name, bool IsPractice, string Description, int QuestionTypeId,
                                        int QuestionSubtypeId, string GUID, int Version)
            {
                TestsRow rowTestsRow = ((TestsRow) (NewRow()));
                rowTestsRow.ItemArray = new object[]
                    {
                        null,
                        Name,
                        IsPractice,
                        Description,
                        QuestionTypeId,
                        QuestionSubtypeId,
                        GUID,
                        Version
                    };
                Rows.Add(rowTestsRow);
                return rowTestsRow;
            }

            [DebuggerNonUserCode()]
            public TestsRow FindById(int Id)
            {
                return ((TestsRow) (Rows.Find(new object[]
                                                  {
                                                      Id
                                                  })));
            }

            [DebuggerNonUserCode()]
            public virtual IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            [DebuggerNonUserCode()]
            public override DataTable Clone()
            {
                TestsDataTable cln = ((TestsDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            protected override DataTable CreateInstance()
            {
                return new TestsDataTable();
            }

            [DebuggerNonUserCode()]
            internal void InitVars()
            {
                columnId = base.Columns["Id"];
                columnName = base.Columns["Name"];
                columnIsPractice = base.Columns["IsPractice"];
                columnDescription = base.Columns["Description"];
                columnQuestionTypeId = base.Columns["QuestionTypeId"];
                columnQuestionSubtypeId = base.Columns["QuestionSubtypeId"];
                columnGUID = base.Columns["GUID"];
                columnVersion = base.Columns["Version"];
            }

            [DebuggerNonUserCode()]
            private void InitClass()
            {
                columnId = new DataColumn("Id", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnId);
                columnName = new DataColumn("Name", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnName);
                columnIsPractice = new DataColumn("IsPractice", typeof (bool), null, MappingType.Element);
                base.Columns.Add(columnIsPractice);
                columnDescription = new DataColumn("Description", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnDescription);
                columnQuestionTypeId = new DataColumn("QuestionTypeId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnQuestionTypeId);
                columnQuestionSubtypeId = new DataColumn("QuestionSubtypeId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnQuestionSubtypeId);
                columnGUID = new DataColumn("GUID", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnGUID);
                columnVersion = new DataColumn("Version", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnVersion);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
                                                                        {
                                                                            columnId
                                                                        }, true));
                columnId.AutoIncrement = true;
                columnId.AllowDBNull = false;
                columnId.ReadOnly = true;
                columnId.Unique = true;
                columnName.AllowDBNull = false;
                columnName.MaxLength = 128;
                columnIsPractice.AllowDBNull = false;
                columnDescription.AllowDBNull = false;
                columnDescription.MaxLength = 2147483647;
                columnGUID.AllowDBNull = false;
                columnGUID.MaxLength = 36;
                columnVersion.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            public TestsRow NewTestsRow()
            {
                return ((TestsRow) (NewRow()));
            }

            [DebuggerNonUserCode()]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TestsRow(builder);
            }

            [DebuggerNonUserCode()]
            protected override Type GetRowType()
            {
                return typeof (TestsRow);
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((TestsRowChanged != null))
                {
                    TestsRowChanged(this, new TestsRowChangeEvent(((TestsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((TestsRowChanging != null))
                {
                    TestsRowChanging(this, new TestsRowChangeEvent(((TestsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((TestsRowDeleted != null))
                {
                    TestsRowDeleted(this, new TestsRowChangeEvent(((TestsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((TestsRowDeleting != null))
                {
                    TestsRowDeleting(this, new TestsRowChangeEvent(((TestsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            public void RemoveTestsRow(TestsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                Dataset ds = new Dataset();
                xs.Add(ds.GetSchemaSerializable());
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class QuestionSetsDataTable : DataTable, IEnumerable
        {
            private DataColumn columnId;

            private DataColumn columnName;

            private DataColumn columnDescription;

            private DataColumn columnNumberOfQuestionsToPick;

            private DataColumn columnTimeLimit;

            private DataColumn columnQuestionTypeId;

            private DataColumn columnQuestionSubtypeId;

            private DataColumn columnNumberOfQuestionsInZone1;

            private DataColumn columnNumberOfQuestionsInZone2;

            private DataColumn columnNumberOfQuestionsInZone3;

            [DebuggerNonUserCode()]
            public QuestionSetsDataTable()
            {
                TableName = "QuestionSets";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            internal QuestionSetsDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            protected QuestionSetsDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            public DataColumn IdColumn
            {
                get { return columnId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn NameColumn
            {
                get { return columnName; }
            }

            [DebuggerNonUserCode()]
            public DataColumn DescriptionColumn
            {
                get { return columnDescription; }
            }

            [DebuggerNonUserCode()]
            public DataColumn NumberOfQuestionsToPickColumn
            {
                get { return columnNumberOfQuestionsToPick; }
            }

            [DebuggerNonUserCode()]
            public DataColumn TimeLimitColumn
            {
                get { return columnTimeLimit; }
            }

            [DebuggerNonUserCode()]
            public DataColumn QuestionTypeIdColumn
            {
                get { return columnQuestionTypeId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn QuestionSubtypeIdColumn
            {
                get { return columnQuestionSubtypeId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn NumberOfQuestionsInZone1Column
            {
                get { return columnNumberOfQuestionsInZone1; }
            }

            [DebuggerNonUserCode()]
            public DataColumn NumberOfQuestionsInZone2Column
            {
                get { return columnNumberOfQuestionsInZone2; }
            }

            [DebuggerNonUserCode()]
            public DataColumn NumberOfQuestionsInZone3Column
            {
                get { return columnNumberOfQuestionsInZone3; }
            }

            [DebuggerNonUserCode()]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode()]
            public QuestionSetsRow this[int index]
            {
                get { return ((QuestionSetsRow) (Rows[index])); }
            }

            public event QuestionSetsRowChangeEventHandler QuestionSetsRowChanging;

            public event QuestionSetsRowChangeEventHandler QuestionSetsRowChanged;

            public event QuestionSetsRowChangeEventHandler QuestionSetsRowDeleting;

            public event QuestionSetsRowChangeEventHandler QuestionSetsRowDeleted;

            [DebuggerNonUserCode()]
            public void AddQuestionSetsRow(QuestionSetsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            public QuestionSetsRow AddQuestionSetsRow(string Name, string Description, int NumberOfQuestionsToPick,
                                                      int TimeLimit, int QuestionTypeId, int QuestionSubtypeId,
                                                      int NumberOfQuestionsInZone1, int NumberOfQuestionsInZone2,
                                                      int NumberOfQuestionsInZone3)
            {
                QuestionSetsRow rowQuestionSetsRow = ((QuestionSetsRow) (NewRow()));
                rowQuestionSetsRow.ItemArray = new object[]
                    {
                        null,
                        Name,
                        Description,
                        NumberOfQuestionsToPick,
                        TimeLimit,
                        QuestionTypeId,
                        QuestionSubtypeId,
                        NumberOfQuestionsInZone1,
                        NumberOfQuestionsInZone2,
                        NumberOfQuestionsInZone3
                    };
                Rows.Add(rowQuestionSetsRow);
                return rowQuestionSetsRow;
            }

            [DebuggerNonUserCode()]
            public QuestionSetsRow FindById(int Id)
            {
                return ((QuestionSetsRow) (Rows.Find(new object[]
                                                         {
                                                             Id
                                                         })));
            }

            [DebuggerNonUserCode()]
            public virtual IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            [DebuggerNonUserCode()]
            public override DataTable Clone()
            {
                QuestionSetsDataTable cln = ((QuestionSetsDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            protected override DataTable CreateInstance()
            {
                return new QuestionSetsDataTable();
            }

            [DebuggerNonUserCode()]
            internal void InitVars()
            {
                columnId = base.Columns["Id"];
                columnName = base.Columns["Name"];
                columnDescription = base.Columns["Description"];
                columnNumberOfQuestionsToPick = base.Columns["NumberOfQuestionsToPick"];
                columnTimeLimit = base.Columns["TimeLimit"];
                columnQuestionTypeId = base.Columns["QuestionTypeId"];
                columnQuestionSubtypeId = base.Columns["QuestionSubtypeId"];
                columnNumberOfQuestionsInZone1 = base.Columns["NumberOfQuestionsInZone1"];
                columnNumberOfQuestionsInZone2 = base.Columns["NumberOfQuestionsInZone2"];
                columnNumberOfQuestionsInZone3 = base.Columns["NumberOfQuestionsInZone3"];
            }

            [DebuggerNonUserCode()]
            private void InitClass()
            {
                columnId = new DataColumn("Id", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnId);
                columnName = new DataColumn("Name", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnName);
                columnDescription = new DataColumn("Description", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnDescription);
                columnNumberOfQuestionsToPick =
                    new DataColumn("NumberOfQuestionsToPick", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnNumberOfQuestionsToPick);
                columnTimeLimit = new DataColumn("TimeLimit", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnTimeLimit);
                columnQuestionTypeId = new DataColumn("QuestionTypeId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnQuestionTypeId);
                columnQuestionSubtypeId = new DataColumn("QuestionSubtypeId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnQuestionSubtypeId);
                columnNumberOfQuestionsInZone1 =
                    new DataColumn("NumberOfQuestionsInZone1", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnNumberOfQuestionsInZone1);
                columnNumberOfQuestionsInZone2 =
                    new DataColumn("NumberOfQuestionsInZone2", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnNumberOfQuestionsInZone2);
                columnNumberOfQuestionsInZone3 =
                    new DataColumn("NumberOfQuestionsInZone3", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnNumberOfQuestionsInZone3);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
                                                                        {
                                                                            columnId
                                                                        }, true));
                columnId.AutoIncrement = true;
                columnId.AllowDBNull = false;
                columnId.ReadOnly = true;
                columnId.Unique = true;
                columnName.AllowDBNull = false;
                columnName.MaxLength = 50;
                columnDescription.AllowDBNull = false;
                columnDescription.MaxLength = 2147483647;
                columnNumberOfQuestionsToPick.AllowDBNull = false;
                columnNumberOfQuestionsInZone1.AllowDBNull = false;
                columnNumberOfQuestionsInZone2.AllowDBNull = false;
                columnNumberOfQuestionsInZone3.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            public QuestionSetsRow NewQuestionSetsRow()
            {
                return ((QuestionSetsRow) (NewRow()));
            }

            [DebuggerNonUserCode()]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new QuestionSetsRow(builder);
            }

            [DebuggerNonUserCode()]
            protected override Type GetRowType()
            {
                return typeof (QuestionSetsRow);
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((QuestionSetsRowChanged != null))
                {
                    QuestionSetsRowChanged(this, new QuestionSetsRowChangeEvent(((QuestionSetsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((QuestionSetsRowChanging != null))
                {
                    QuestionSetsRowChanging(this, new QuestionSetsRowChangeEvent(((QuestionSetsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((QuestionSetsRowDeleted != null))
                {
                    QuestionSetsRowDeleted(this, new QuestionSetsRowChangeEvent(((QuestionSetsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((QuestionSetsRowDeleting != null))
                {
                    QuestionSetsRowDeleting(this, new QuestionSetsRowChangeEvent(((QuestionSetsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            public void RemoveQuestionSetsRow(QuestionSetsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                Dataset ds = new Dataset();
                xs.Add(ds.GetSchemaSerializable());
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QuestionSetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class TestContentsDataTable : DataTable, IEnumerable
        {
            private DataColumn columnTestId;

            private DataColumn columnQuestionSetId;

            private DataColumn columnQuestionSetOrder;

            [DebuggerNonUserCode()]
            public TestContentsDataTable()
            {
                TableName = "TestContents";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            internal TestContentsDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            protected TestContentsDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            public DataColumn TestIdColumn
            {
                get { return columnTestId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn QuestionSetIdColumn
            {
                get { return columnQuestionSetId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn QuestionSetOrderColumn
            {
                get { return columnQuestionSetOrder; }
            }

            [DebuggerNonUserCode()]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode()]
            public TestContentsRow this[int index]
            {
                get { return ((TestContentsRow) (Rows[index])); }
            }

            public event TestContentsRowChangeEventHandler TestContentsRowChanging;

            public event TestContentsRowChangeEventHandler TestContentsRowChanged;

            public event TestContentsRowChangeEventHandler TestContentsRowDeleting;

            public event TestContentsRowChangeEventHandler TestContentsRowDeleted;

            [DebuggerNonUserCode()]
            public void AddTestContentsRow(TestContentsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            public TestContentsRow AddTestContentsRow(int TestId, int QuestionSetId, byte QuestionSetOrder)
            {
                TestContentsRow rowTestContentsRow = ((TestContentsRow) (NewRow()));
                rowTestContentsRow.ItemArray = new object[]
                    {
                        TestId,
                        QuestionSetId,
                        QuestionSetOrder
                    };
                Rows.Add(rowTestContentsRow);
                return rowTestContentsRow;
            }

            [DebuggerNonUserCode()]
            public TestContentsRow FindByTestIdQuestionSetId(int TestId, int QuestionSetId)
            {
                return ((TestContentsRow) (Rows.Find(new object[]
                                                         {
                                                             TestId,
                                                             QuestionSetId
                                                         })));
            }

            [DebuggerNonUserCode()]
            public virtual IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            [DebuggerNonUserCode()]
            public override DataTable Clone()
            {
                TestContentsDataTable cln = ((TestContentsDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            protected override DataTable CreateInstance()
            {
                return new TestContentsDataTable();
            }

            [DebuggerNonUserCode()]
            internal void InitVars()
            {
                columnTestId = base.Columns["TestId"];
                columnQuestionSetId = base.Columns["QuestionSetId"];
                columnQuestionSetOrder = base.Columns["QuestionSetOrder"];
            }

            [DebuggerNonUserCode()]
            private void InitClass()
            {
                columnTestId = new DataColumn("TestId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnTestId);
                columnQuestionSetId = new DataColumn("QuestionSetId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnQuestionSetId);
                columnQuestionSetOrder = new DataColumn("QuestionSetOrder", typeof (byte), null, MappingType.Element);
                base.Columns.Add(columnQuestionSetOrder);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
                                                                        {
                                                                            columnTestId,
                                                                            columnQuestionSetId
                                                                        }, true));
                columnTestId.AllowDBNull = false;
                columnQuestionSetId.AllowDBNull = false;
                columnQuestionSetOrder.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            public TestContentsRow NewTestContentsRow()
            {
                return ((TestContentsRow) (NewRow()));
            }

            [DebuggerNonUserCode()]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TestContentsRow(builder);
            }

            [DebuggerNonUserCode()]
            protected override Type GetRowType()
            {
                return typeof (TestContentsRow);
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((TestContentsRowChanged != null))
                {
                    TestContentsRowChanged(this, new TestContentsRowChangeEvent(((TestContentsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((TestContentsRowChanging != null))
                {
                    TestContentsRowChanging(this, new TestContentsRowChangeEvent(((TestContentsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((TestContentsRowDeleted != null))
                {
                    TestContentsRowDeleted(this, new TestContentsRowChangeEvent(((TestContentsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((TestContentsRowDeleting != null))
                {
                    TestContentsRowDeleting(this, new TestContentsRowChangeEvent(((TestContentsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            public void RemoveTestContentsRow(TestContentsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                Dataset ds = new Dataset();
                xs.Add(ds.GetSchemaSerializable());
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestContentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class AnswersDataTable : DataTable, IEnumerable
        {
            private DataColumn columnId;

            private DataColumn columnQuestionId;

            private DataColumn columnText;

            private DataColumn columnIsCorrect;

            private DataColumn columnOrder;

            [DebuggerNonUserCode()]
            public AnswersDataTable()
            {
                TableName = "Answers";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            internal AnswersDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            protected AnswersDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            public DataColumn IdColumn
            {
                get { return columnId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn QuestionIdColumn
            {
                get { return columnQuestionId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn TextColumn
            {
                get { return columnText; }
            }

            [DebuggerNonUserCode()]
            public DataColumn IsCorrectColumn
            {
                get { return columnIsCorrect; }
            }

            [DebuggerNonUserCode()]
            public DataColumn OrderColumn
            {
                get { return columnOrder; }
            }

            [DebuggerNonUserCode()]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode()]
            public AnswersRow this[int index]
            {
                get { return ((AnswersRow) (Rows[index])); }
            }

            public event AnswersRowChangeEventHandler AnswersRowChanging;

            public event AnswersRowChangeEventHandler AnswersRowChanged;

            public event AnswersRowChangeEventHandler AnswersRowDeleting;

            public event AnswersRowChangeEventHandler AnswersRowDeleted;

            [DebuggerNonUserCode()]
            public void AddAnswersRow(AnswersRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            public AnswersRow AddAnswersRow(int QuestionId, string Text, bool IsCorrect, byte Order)
            {
                AnswersRow rowAnswersRow = ((AnswersRow) (NewRow()));
                rowAnswersRow.ItemArray = new object[]
                    {
                        null,
                        QuestionId,
                        Text,
                        IsCorrect,
                        Order
                    };
                Rows.Add(rowAnswersRow);
                return rowAnswersRow;
            }

            [DebuggerNonUserCode()]
            public AnswersRow FindById(int Id)
            {
                return ((AnswersRow) (Rows.Find(new object[]
                                                    {
                                                        Id
                                                    })));
            }

            [DebuggerNonUserCode()]
            public virtual IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            [DebuggerNonUserCode()]
            public override DataTable Clone()
            {
                AnswersDataTable cln = ((AnswersDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            protected override DataTable CreateInstance()
            {
                return new AnswersDataTable();
            }

            [DebuggerNonUserCode()]
            internal void InitVars()
            {
                columnId = base.Columns["Id"];
                columnQuestionId = base.Columns["QuestionId"];
                columnText = base.Columns["Text"];
                columnIsCorrect = base.Columns["IsCorrect"];
                columnOrder = base.Columns["Order"];
            }

            [DebuggerNonUserCode()]
            private void InitClass()
            {
                columnId = new DataColumn("Id", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnId);
                columnQuestionId = new DataColumn("QuestionId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnQuestionId);
                columnText = new DataColumn("Text", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnText);
                columnIsCorrect = new DataColumn("IsCorrect", typeof (bool), null, MappingType.Element);
                base.Columns.Add(columnIsCorrect);
                columnOrder = new DataColumn("Order", typeof (byte), null, MappingType.Element);
                base.Columns.Add(columnOrder);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
                                                                        {
                                                                            columnId
                                                                        }, true));
                columnId.AutoIncrement = true;
                columnId.AllowDBNull = false;
                columnId.ReadOnly = true;
                columnId.Unique = true;
                columnQuestionId.AllowDBNull = false;
                columnText.AllowDBNull = false;
                columnText.MaxLength = 512;
                columnIsCorrect.AllowDBNull = false;
                columnOrder.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            public AnswersRow NewAnswersRow()
            {
                return ((AnswersRow) (NewRow()));
            }

            [DebuggerNonUserCode()]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new AnswersRow(builder);
            }

            [DebuggerNonUserCode()]
            protected override Type GetRowType()
            {
                return typeof (AnswersRow);
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((AnswersRowChanged != null))
                {
                    AnswersRowChanged(this, new AnswersRowChangeEvent(((AnswersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((AnswersRowChanging != null))
                {
                    AnswersRowChanging(this, new AnswersRowChangeEvent(((AnswersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((AnswersRowDeleted != null))
                {
                    AnswersRowDeleted(this, new AnswersRowChangeEvent(((AnswersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((AnswersRowDeleting != null))
                {
                    AnswersRowDeleting(this, new AnswersRowChangeEvent(((AnswersRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            public void RemoveAnswersRow(AnswersRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                Dataset ds = new Dataset();
                xs.Add(ds.GetSchemaSerializable());
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnswersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class SetsToQuestionsDataTable : DataTable, IEnumerable
        {
            private DataColumn columnSetId;

            private DataColumn columnQuestionId;

            private DataColumn columnQuestionZone;

            private DataColumn columnQuestionOrder;

            [DebuggerNonUserCode()]
            public SetsToQuestionsDataTable()
            {
                TableName = "SetsToQuestions";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            internal SetsToQuestionsDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            protected SetsToQuestionsDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            public DataColumn SetIdColumn
            {
                get { return columnSetId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn QuestionIdColumn
            {
                get { return columnQuestionId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn QuestionZoneColumn
            {
                get { return columnQuestionZone; }
            }

            [DebuggerNonUserCode()]
            public DataColumn QuestionOrderColumn
            {
                get { return columnQuestionOrder; }
            }

            [DebuggerNonUserCode()]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode()]
            public SetsToQuestionsRow this[int index]
            {
                get { return ((SetsToQuestionsRow) (Rows[index])); }
            }

            public event SetsToQuestionsRowChangeEventHandler SetsToQuestionsRowChanging;

            public event SetsToQuestionsRowChangeEventHandler SetsToQuestionsRowChanged;

            public event SetsToQuestionsRowChangeEventHandler SetsToQuestionsRowDeleting;

            public event SetsToQuestionsRowChangeEventHandler SetsToQuestionsRowDeleted;

            [DebuggerNonUserCode()]
            public void AddSetsToQuestionsRow(SetsToQuestionsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            public SetsToQuestionsRow AddSetsToQuestionsRow(int SetId, int QuestionId, byte QuestionZone,
                                                            byte QuestionOrder)
            {
                SetsToQuestionsRow rowSetsToQuestionsRow = ((SetsToQuestionsRow) (NewRow()));
                rowSetsToQuestionsRow.ItemArray = new object[]
                    {
                        SetId,
                        QuestionId,
                        QuestionZone,
                        QuestionOrder
                    };
                Rows.Add(rowSetsToQuestionsRow);
                return rowSetsToQuestionsRow;
            }

            [DebuggerNonUserCode()]
            public SetsToQuestionsRow FindBySetIdQuestionId(int SetId, int QuestionId)
            {
                return ((SetsToQuestionsRow) (Rows.Find(new object[]
                                                            {
                                                                SetId,
                                                                QuestionId
                                                            })));
            }

            [DebuggerNonUserCode()]
            public virtual IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            [DebuggerNonUserCode()]
            public override DataTable Clone()
            {
                SetsToQuestionsDataTable cln = ((SetsToQuestionsDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            protected override DataTable CreateInstance()
            {
                return new SetsToQuestionsDataTable();
            }

            [DebuggerNonUserCode()]
            internal void InitVars()
            {
                columnSetId = base.Columns["SetId"];
                columnQuestionId = base.Columns["QuestionId"];
                columnQuestionZone = base.Columns["QuestionZone"];
                columnQuestionOrder = base.Columns["QuestionOrder"];
            }

            [DebuggerNonUserCode()]
            private void InitClass()
            {
                columnSetId = new DataColumn("SetId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnSetId);
                columnQuestionId = new DataColumn("QuestionId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnQuestionId);
                columnQuestionZone = new DataColumn("QuestionZone", typeof (byte), null, MappingType.Element);
                base.Columns.Add(columnQuestionZone);
                columnQuestionOrder = new DataColumn("QuestionOrder", typeof (byte), null, MappingType.Element);
                base.Columns.Add(columnQuestionOrder);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
                                                                        {
                                                                            columnSetId,
                                                                            columnQuestionId
                                                                        }, true));
                columnSetId.AllowDBNull = false;
                columnQuestionId.AllowDBNull = false;
                columnQuestionZone.AllowDBNull = false;
                columnQuestionOrder.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            public SetsToQuestionsRow NewSetsToQuestionsRow()
            {
                return ((SetsToQuestionsRow) (NewRow()));
            }

            [DebuggerNonUserCode()]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SetsToQuestionsRow(builder);
            }

            [DebuggerNonUserCode()]
            protected override Type GetRowType()
            {
                return typeof (SetsToQuestionsRow);
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((SetsToQuestionsRowChanged != null))
                {
                    SetsToQuestionsRowChanged(this,
                                              new SetsToQuestionsRowChangeEvent(((SetsToQuestionsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((SetsToQuestionsRowChanging != null))
                {
                    SetsToQuestionsRowChanging(this,
                                               new SetsToQuestionsRowChangeEvent(((SetsToQuestionsRow) (e.Row)),
                                                                                 e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((SetsToQuestionsRowDeleted != null))
                {
                    SetsToQuestionsRowDeleted(this,
                                              new SetsToQuestionsRowChangeEvent(((SetsToQuestionsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((SetsToQuestionsRowDeleting != null))
                {
                    SetsToQuestionsRowDeleting(this,
                                               new SetsToQuestionsRowChangeEvent(((SetsToQuestionsRow) (e.Row)),
                                                                                 e.Action));
                }
            }

            [DebuggerNonUserCode()]
            public void RemoveSetsToQuestionsRow(SetsToQuestionsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                Dataset ds = new Dataset();
                xs.Add(ds.GetSchemaSerializable());
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SetsToQuestionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class QuestionsDataTable : DataTable, IEnumerable
        {
            private DataColumn columnId;

            private DataColumn columnTypeId;

            private DataColumn columnSubtypeId;

            private DataColumn columnDifficultyLevelId;

            private DataColumn columnText;

            private DataColumn columnPicture;

            [DebuggerNonUserCode()]
            public QuestionsDataTable()
            {
                TableName = "Questions";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            internal QuestionsDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            protected QuestionsDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            public DataColumn IdColumn
            {
                get { return columnId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn TypeIdColumn
            {
                get { return columnTypeId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn SubtypeIdColumn
            {
                get { return columnSubtypeId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn DifficultyLevelIdColumn
            {
                get { return columnDifficultyLevelId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn TextColumn
            {
                get { return columnText; }
            }

            [DebuggerNonUserCode()]
            public DataColumn PictureColumn
            {
                get { return columnPicture; }
            }

            [DebuggerNonUserCode()]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode()]
            public QuestionsRow this[int index]
            {
                get { return ((QuestionsRow) (Rows[index])); }
            }

            public event QuestionsRowChangeEventHandler QuestionsRowChanging;

            public event QuestionsRowChangeEventHandler QuestionsRowChanged;

            public event QuestionsRowChangeEventHandler QuestionsRowDeleting;

            public event QuestionsRowChangeEventHandler QuestionsRowDeleted;

            [DebuggerNonUserCode()]
            public void AddQuestionsRow(QuestionsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            public QuestionsRow AddQuestionsRow(int TypeId, int SubtypeId, int DifficultyLevelId, string Text,
                                                byte[] Picture)
            {
                QuestionsRow rowQuestionsRow = ((QuestionsRow) (NewRow()));
                rowQuestionsRow.ItemArray = new object[]
                    {
                        null,
                        TypeId,
                        SubtypeId,
                        DifficultyLevelId,
                        Text,
                        Picture
                    };
                Rows.Add(rowQuestionsRow);
                return rowQuestionsRow;
            }

            [DebuggerNonUserCode()]
            public QuestionsRow FindById(int Id)
            {
                return ((QuestionsRow) (Rows.Find(new object[]
                                                      {
                                                          Id
                                                      })));
            }

            [DebuggerNonUserCode()]
            public virtual IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            [DebuggerNonUserCode()]
            public override DataTable Clone()
            {
                QuestionsDataTable cln = ((QuestionsDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            protected override DataTable CreateInstance()
            {
                return new QuestionsDataTable();
            }

            [DebuggerNonUserCode()]
            internal void InitVars()
            {
                columnId = base.Columns["Id"];
                columnTypeId = base.Columns["TypeId"];
                columnSubtypeId = base.Columns["SubtypeId"];
                columnDifficultyLevelId = base.Columns["DifficultyLevelId"];
                columnText = base.Columns["Text"];
                columnPicture = base.Columns["Picture"];
            }

            [DebuggerNonUserCode()]
            private void InitClass()
            {
                columnId = new DataColumn("Id", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnId);
                columnTypeId = new DataColumn("TypeId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnTypeId);
                columnSubtypeId = new DataColumn("SubtypeId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnSubtypeId);
                columnDifficultyLevelId = new DataColumn("DifficultyLevelId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnDifficultyLevelId);
                columnText = new DataColumn("Text", typeof (string), null, MappingType.Element);
                base.Columns.Add(columnText);
                columnPicture = new DataColumn("Picture", typeof (byte[]), null, MappingType.Element);
                base.Columns.Add(columnPicture);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
                                                                        {
                                                                            columnId
                                                                        }, true));
                columnId.AutoIncrement = true;
                columnId.AllowDBNull = false;
                columnId.Unique = true;
                columnText.MaxLength = 536870910;
            }

            [DebuggerNonUserCode()]
            public QuestionsRow NewQuestionsRow()
            {
                return ((QuestionsRow) (NewRow()));
            }

            [DebuggerNonUserCode()]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new QuestionsRow(builder);
            }

            [DebuggerNonUserCode()]
            protected override Type GetRowType()
            {
                return typeof (QuestionsRow);
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((QuestionsRowChanged != null))
                {
                    QuestionsRowChanged(this, new QuestionsRowChangeEvent(((QuestionsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((QuestionsRowChanging != null))
                {
                    QuestionsRowChanging(this, new QuestionsRowChangeEvent(((QuestionsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((QuestionsRowDeleted != null))
                {
                    QuestionsRowDeleted(this, new QuestionsRowChangeEvent(((QuestionsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((QuestionsRowDeleting != null))
                {
                    QuestionsRowDeleting(this, new QuestionsRowChangeEvent(((QuestionsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            public void RemoveQuestionsRow(QuestionsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                Dataset ds = new Dataset();
                xs.Add(ds.GetSchemaSerializable());
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QuestionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class PassagesToQuestionsDataTable : DataTable, IEnumerable
        {
            private DataColumn columnPassageQuestionId;

            private DataColumn columnQuestionId;

            private DataColumn columnQuestionOrder;

            [DebuggerNonUserCode()]
            public PassagesToQuestionsDataTable()
            {
                TableName = "PassagesToQuestions";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            internal PassagesToQuestionsDataTable(DataTable table)
            {
                TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            protected PassagesToQuestionsDataTable(SerializationInfo info, StreamingContext context) :
                base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            public DataColumn PassageQuestionIdColumn
            {
                get { return columnPassageQuestionId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn QuestionIdColumn
            {
                get { return columnQuestionId; }
            }

            [DebuggerNonUserCode()]
            public DataColumn QuestionOrderColumn
            {
                get { return columnQuestionOrder; }
            }

            [DebuggerNonUserCode()]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode()]
            public PassagesToQuestionsRow this[int index]
            {
                get { return ((PassagesToQuestionsRow) (Rows[index])); }
            }

            public event PassagesToQuestionsRowChangeEventHandler PassagesToQuestionsRowChanging;

            public event PassagesToQuestionsRowChangeEventHandler PassagesToQuestionsRowChanged;

            public event PassagesToQuestionsRowChangeEventHandler PassagesToQuestionsRowDeleting;

            public event PassagesToQuestionsRowChangeEventHandler PassagesToQuestionsRowDeleted;

            [DebuggerNonUserCode()]
            public void AddPassagesToQuestionsRow(PassagesToQuestionsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            public PassagesToQuestionsRow AddPassagesToQuestionsRow(int PassageQuestionId, int QuestionId,
                                                                    int QuestionOrder)
            {
                PassagesToQuestionsRow rowPassagesToQuestionsRow = ((PassagesToQuestionsRow) (NewRow()));
                rowPassagesToQuestionsRow.ItemArray = new object[]
                    {
                        PassageQuestionId,
                        QuestionId,
                        QuestionOrder
                    };
                Rows.Add(rowPassagesToQuestionsRow);
                return rowPassagesToQuestionsRow;
            }

            [DebuggerNonUserCode()]
            public PassagesToQuestionsRow FindByQuestionId(int QuestionId)
            {
                return ((PassagesToQuestionsRow) (Rows.Find(new object[]
                                                                {
                                                                    QuestionId
                                                                })));
            }

            [DebuggerNonUserCode()]
            public virtual IEnumerator GetEnumerator()
            {
                return Rows.GetEnumerator();
            }

            [DebuggerNonUserCode()]
            public override DataTable Clone()
            {
                PassagesToQuestionsDataTable cln = ((PassagesToQuestionsDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            protected override DataTable CreateInstance()
            {
                return new PassagesToQuestionsDataTable();
            }

            [DebuggerNonUserCode()]
            internal void InitVars()
            {
                columnPassageQuestionId = base.Columns["PassageQuestionId"];
                columnQuestionId = base.Columns["QuestionId"];
                columnQuestionOrder = base.Columns["QuestionOrder"];
            }

            [DebuggerNonUserCode()]
            private void InitClass()
            {
                columnPassageQuestionId = new DataColumn("PassageQuestionId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnPassageQuestionId);
                columnQuestionId = new DataColumn("QuestionId", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnQuestionId);
                columnQuestionOrder = new DataColumn("QuestionOrder", typeof (int), null, MappingType.Element);
                base.Columns.Add(columnQuestionOrder);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[]
                                                                        {
                                                                            columnQuestionId
                                                                        }, true));
                columnQuestionId.AllowDBNull = false;
                columnQuestionId.Unique = true;
            }

            [DebuggerNonUserCode()]
            public PassagesToQuestionsRow NewPassagesToQuestionsRow()
            {
                return ((PassagesToQuestionsRow) (NewRow()));
            }

            [DebuggerNonUserCode()]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PassagesToQuestionsRow(builder);
            }

            [DebuggerNonUserCode()]
            protected override Type GetRowType()
            {
                return typeof (PassagesToQuestionsRow);
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((PassagesToQuestionsRowChanged != null))
                {
                    PassagesToQuestionsRowChanged(this,
                                                  new PassagesToQuestionsRowChangeEvent(
                                                      ((PassagesToQuestionsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((PassagesToQuestionsRowChanging != null))
                {
                    PassagesToQuestionsRowChanging(this,
                                                   new PassagesToQuestionsRowChangeEvent(
                                                       ((PassagesToQuestionsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((PassagesToQuestionsRowDeleted != null))
                {
                    PassagesToQuestionsRowDeleted(this,
                                                  new PassagesToQuestionsRowChangeEvent(
                                                      ((PassagesToQuestionsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((PassagesToQuestionsRowDeleting != null))
                {
                    PassagesToQuestionsRowDeleting(this,
                                                   new PassagesToQuestionsRowChangeEvent(
                                                       ((PassagesToQuestionsRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode()]
            public void RemovePassagesToQuestionsRow(PassagesToQuestionsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                Dataset ds = new Dataset();
                xs.Add(ds.GetSchemaSerializable());
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PassagesToQuestionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestsRow : DataRow
        {
            private TestsDataTable tableTests;

            [DebuggerNonUserCode()]
            internal TestsRow(DataRowBuilder rb) :
                base(rb)
            {
                tableTests = ((TestsDataTable) (Table));
            }

            [DebuggerNonUserCode()]
            public int Id
            {
                get { return ((int) (this[tableTests.IdColumn])); }
                set { this[tableTests.IdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public string Name
            {
                get { return ((string) (this[tableTests.NameColumn])); }
                set { this[tableTests.NameColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public bool IsPractice
            {
                get { return ((bool) (this[tableTests.IsPracticeColumn])); }
                set { this[tableTests.IsPracticeColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public string Description
            {
                get { return ((string) (this[tableTests.DescriptionColumn])); }
                set { this[tableTests.DescriptionColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int QuestionTypeId
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableTests.QuestionTypeIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'QuestionTypeId\' in table \'Tests\' is DBNull.", e);
                    }
                }
                set { this[tableTests.QuestionTypeIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int QuestionSubtypeId
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableTests.QuestionSubtypeIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'QuestionSubtypeId\' in table \'Tests\' is DBNull.", e);
                    }
                }
                set { this[tableTests.QuestionSubtypeIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public string GUID
            {
                get { return ((string) (this[tableTests.GUIDColumn])); }
                set { this[tableTests.GUIDColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int Version
            {
                get { return ((int) (this[tableTests.VersionColumn])); }
                set { this[tableTests.VersionColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public bool IsQuestionTypeIdNull()
            {
                return IsNull(tableTests.QuestionTypeIdColumn);
            }

            [DebuggerNonUserCode()]
            public void SetQuestionTypeIdNull()
            {
                this[tableTests.QuestionTypeIdColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            public bool IsQuestionSubtypeIdNull()
            {
                return IsNull(tableTests.QuestionSubtypeIdColumn);
            }

            [DebuggerNonUserCode()]
            public void SetQuestionSubtypeIdNull()
            {
                this[tableTests.QuestionSubtypeIdColumn] = Convert.DBNull;
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QuestionSetsRow : DataRow
        {
            private QuestionSetsDataTable tableQuestionSets;

            [DebuggerNonUserCode()]
            internal QuestionSetsRow(DataRowBuilder rb) :
                base(rb)
            {
                tableQuestionSets = ((QuestionSetsDataTable) (Table));
            }

            [DebuggerNonUserCode()]
            public int Id
            {
                get { return ((int) (this[tableQuestionSets.IdColumn])); }
                set { this[tableQuestionSets.IdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public string Name
            {
                get { return ((string) (this[tableQuestionSets.NameColumn])); }
                set { this[tableQuestionSets.NameColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public string Description
            {
                get { return ((string) (this[tableQuestionSets.DescriptionColumn])); }
                set { this[tableQuestionSets.DescriptionColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int NumberOfQuestionsToPick
            {
                get { return ((int) (this[tableQuestionSets.NumberOfQuestionsToPickColumn])); }
                set { this[tableQuestionSets.NumberOfQuestionsToPickColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int TimeLimit
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableQuestionSets.TimeLimitColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'TimeLimit\' in table \'QuestionSets\' is DBNull.", e);
                    }
                }
                set { this[tableQuestionSets.TimeLimitColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int QuestionTypeId
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableQuestionSets.QuestionTypeIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'QuestionTypeId\' in table \'QuestionSets\' is DBNull.", e);
                    }
                }
                set { this[tableQuestionSets.QuestionTypeIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int QuestionSubtypeId
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableQuestionSets.QuestionSubtypeIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'QuestionSubtypeId\' in table \'QuestionSets\' is DBNull.", e);
                    }
                }
                set { this[tableQuestionSets.QuestionSubtypeIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int NumberOfQuestionsInZone1
            {
                get { return ((int) (this[tableQuestionSets.NumberOfQuestionsInZone1Column])); }
                set { this[tableQuestionSets.NumberOfQuestionsInZone1Column] = value; }
            }

            [DebuggerNonUserCode()]
            public int NumberOfQuestionsInZone2
            {
                get { return ((int) (this[tableQuestionSets.NumberOfQuestionsInZone2Column])); }
                set { this[tableQuestionSets.NumberOfQuestionsInZone2Column] = value; }
            }

            [DebuggerNonUserCode()]
            public int NumberOfQuestionsInZone3
            {
                get { return ((int) (this[tableQuestionSets.NumberOfQuestionsInZone3Column])); }
                set { this[tableQuestionSets.NumberOfQuestionsInZone3Column] = value; }
            }

            [DebuggerNonUserCode()]
            public bool IsTimeLimitNull()
            {
                return IsNull(tableQuestionSets.TimeLimitColumn);
            }

            [DebuggerNonUserCode()]
            public void SetTimeLimitNull()
            {
                this[tableQuestionSets.TimeLimitColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            public bool IsQuestionTypeIdNull()
            {
                return IsNull(tableQuestionSets.QuestionTypeIdColumn);
            }

            [DebuggerNonUserCode()]
            public void SetQuestionTypeIdNull()
            {
                this[tableQuestionSets.QuestionTypeIdColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            public bool IsQuestionSubtypeIdNull()
            {
                return IsNull(tableQuestionSets.QuestionSubtypeIdColumn);
            }

            [DebuggerNonUserCode()]
            public void SetQuestionSubtypeIdNull()
            {
                this[tableQuestionSets.QuestionSubtypeIdColumn] = Convert.DBNull;
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestContentsRow : DataRow
        {
            private TestContentsDataTable tableTestContents;

            [DebuggerNonUserCode()]
            internal TestContentsRow(DataRowBuilder rb) :
                base(rb)
            {
                tableTestContents = ((TestContentsDataTable) (Table));
            }

            [DebuggerNonUserCode()]
            public int TestId
            {
                get { return ((int) (this[tableTestContents.TestIdColumn])); }
                set { this[tableTestContents.TestIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int QuestionSetId
            {
                get { return ((int) (this[tableTestContents.QuestionSetIdColumn])); }
                set { this[tableTestContents.QuestionSetIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public byte QuestionSetOrder
            {
                get { return ((byte) (this[tableTestContents.QuestionSetOrderColumn])); }
                set { this[tableTestContents.QuestionSetOrderColumn] = value; }
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AnswersRow : DataRow
        {
            private AnswersDataTable tableAnswers;

            [DebuggerNonUserCode()]
            internal AnswersRow(DataRowBuilder rb) :
                base(rb)
            {
                tableAnswers = ((AnswersDataTable) (Table));
            }

            [DebuggerNonUserCode()]
            public int Id
            {
                get { return ((int) (this[tableAnswers.IdColumn])); }
                set { this[tableAnswers.IdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int QuestionId
            {
                get { return ((int) (this[tableAnswers.QuestionIdColumn])); }
                set { this[tableAnswers.QuestionIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public string Text
            {
                get { return ((string) (this[tableAnswers.TextColumn])); }
                set { this[tableAnswers.TextColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public bool IsCorrect
            {
                get { return ((bool) (this[tableAnswers.IsCorrectColumn])); }
                set { this[tableAnswers.IsCorrectColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public byte Order
            {
                get { return ((byte) (this[tableAnswers.OrderColumn])); }
                set { this[tableAnswers.OrderColumn] = value; }
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SetsToQuestionsRow : DataRow
        {
            private SetsToQuestionsDataTable tableSetsToQuestions;

            [DebuggerNonUserCode()]
            internal SetsToQuestionsRow(DataRowBuilder rb) :
                base(rb)
            {
                tableSetsToQuestions = ((SetsToQuestionsDataTable) (Table));
            }

            [DebuggerNonUserCode()]
            public int SetId
            {
                get { return ((int) (this[tableSetsToQuestions.SetIdColumn])); }
                set { this[tableSetsToQuestions.SetIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int QuestionId
            {
                get { return ((int) (this[tableSetsToQuestions.QuestionIdColumn])); }
                set { this[tableSetsToQuestions.QuestionIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public byte QuestionZone
            {
                get { return ((byte) (this[tableSetsToQuestions.QuestionZoneColumn])); }
                set { this[tableSetsToQuestions.QuestionZoneColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public byte QuestionOrder
            {
                get { return ((byte) (this[tableSetsToQuestions.QuestionOrderColumn])); }
                set { this[tableSetsToQuestions.QuestionOrderColumn] = value; }
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QuestionsRow : DataRow
        {
            private QuestionsDataTable tableQuestions;

            [DebuggerNonUserCode()]
            internal QuestionsRow(DataRowBuilder rb) :
                base(rb)
            {
                tableQuestions = ((QuestionsDataTable) (Table));
            }

            [DebuggerNonUserCode()]
            public int Id
            {
                get { return ((int) (this[tableQuestions.IdColumn])); }
                set { this[tableQuestions.IdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int TypeId
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableQuestions.TypeIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'TypeId\' in table \'Questions\' is DBNull.", e);
                    }
                }
                set { this[tableQuestions.TypeIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int SubtypeId
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableQuestions.SubtypeIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'SubtypeId\' in table \'Questions\' is DBNull.", e);
                    }
                }
                set { this[tableQuestions.SubtypeIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int DifficultyLevelId
            {
                get
                {
                    try
                    {
                        return ((int) (this[tableQuestions.DifficultyLevelIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'DifficultyLevelId\' in table \'Questions\' is DBNull.", e);
                    }
                }
                set { this[tableQuestions.DifficultyLevelIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public string Text
            {
                get
                {
                    try
                    {
                        return ((string) (this[tableQuestions.TextColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Text\' in table \'Questions\' is DBNull.", e);
                    }
                }
                set { this[tableQuestions.TextColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public byte[] Picture
            {
                get
                {
                    try
                    {
                        return ((byte[]) (this[tableQuestions.PictureColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'Picture\' in table \'Questions\' is DBNull.", e);
                    }
                }
                set { this[tableQuestions.PictureColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public bool IsTypeIdNull()
            {
                return IsNull(tableQuestions.TypeIdColumn);
            }

            [DebuggerNonUserCode()]
            public void SetTypeIdNull()
            {
                this[tableQuestions.TypeIdColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            public bool IsSubtypeIdNull()
            {
                return IsNull(tableQuestions.SubtypeIdColumn);
            }

            [DebuggerNonUserCode()]
            public void SetSubtypeIdNull()
            {
                this[tableQuestions.SubtypeIdColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            public bool IsDifficultyLevelIdNull()
            {
                return IsNull(tableQuestions.DifficultyLevelIdColumn);
            }

            [DebuggerNonUserCode()]
            public void SetDifficultyLevelIdNull()
            {
                this[tableQuestions.DifficultyLevelIdColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            public bool IsTextNull()
            {
                return IsNull(tableQuestions.TextColumn);
            }

            [DebuggerNonUserCode()]
            public void SetTextNull()
            {
                this[tableQuestions.TextColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            public bool IsPictureNull()
            {
                return IsNull(tableQuestions.PictureColumn);
            }

            [DebuggerNonUserCode()]
            public void SetPictureNull()
            {
                this[tableQuestions.PictureColumn] = Convert.DBNull;
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PassagesToQuestionsRow : DataRow
        {
            private PassagesToQuestionsDataTable tablePassagesToQuestions;

            [DebuggerNonUserCode()]
            internal PassagesToQuestionsRow(DataRowBuilder rb) :
                base(rb)
            {
                tablePassagesToQuestions = ((PassagesToQuestionsDataTable) (Table));
            }

            [DebuggerNonUserCode()]
            public int PassageQuestionId
            {
                get
                {
                    try
                    {
                        return ((int) (this[tablePassagesToQuestions.PassageQuestionIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'PassageQuestionId\' in table \'PassagesToQuestions\' is DBNull" +
                            ".", e);
                    }
                }
                set { this[tablePassagesToQuestions.PassageQuestionIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int QuestionId
            {
                get { return ((int) (this[tablePassagesToQuestions.QuestionIdColumn])); }
                set { this[tablePassagesToQuestions.QuestionIdColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public int QuestionOrder
            {
                get
                {
                    try
                    {
                        return ((int) (this[tablePassagesToQuestions.QuestionOrderColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException(
                            "The value for column \'QuestionOrder\' in table \'PassagesToQuestions\' is DBNull.", e);
                    }
                }
                set { this[tablePassagesToQuestions.QuestionOrderColumn] = value; }
            }

            [DebuggerNonUserCode()]
            public bool IsPassageQuestionIdNull()
            {
                return IsNull(tablePassagesToQuestions.PassageQuestionIdColumn);
            }

            [DebuggerNonUserCode()]
            public void SetPassageQuestionIdNull()
            {
                this[tablePassagesToQuestions.PassageQuestionIdColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            public bool IsQuestionOrderNull()
            {
                return IsNull(tablePassagesToQuestions.QuestionOrderColumn);
            }

            [DebuggerNonUserCode()]
            public void SetQuestionOrderNull()
            {
                this[tablePassagesToQuestions.QuestionOrderColumn] = Convert.DBNull;
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestsRowChangeEvent : EventArgs
        {
            private TestsRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            public TestsRowChangeEvent(TestsRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            public TestsRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode()]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QuestionSetsRowChangeEvent : EventArgs
        {
            private QuestionSetsRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            public QuestionSetsRowChangeEvent(QuestionSetsRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            public QuestionSetsRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode()]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestContentsRowChangeEvent : EventArgs
        {
            private TestContentsRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            public TestContentsRowChangeEvent(TestContentsRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            public TestContentsRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode()]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AnswersRowChangeEvent : EventArgs
        {
            private AnswersRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            public AnswersRowChangeEvent(AnswersRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            public AnswersRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode()]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SetsToQuestionsRowChangeEvent : EventArgs
        {
            private SetsToQuestionsRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            public SetsToQuestionsRowChangeEvent(SetsToQuestionsRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            public SetsToQuestionsRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode()]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QuestionsRowChangeEvent : EventArgs
        {
            private QuestionsRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            public QuestionsRowChangeEvent(QuestionsRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            public QuestionsRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode()]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PassagesToQuestionsRowChangeEvent : EventArgs
        {
            private PassagesToQuestionsRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            public PassagesToQuestionsRowChangeEvent(PassagesToQuestionsRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            public PassagesToQuestionsRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode()]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }
    }
}

#pragma warning restore 1591