//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GmatClubTest.BusinessLogic {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("TestsDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TestsDataSet : System.Data.DataSet {
        
        private TestsDataTable tableTests;
        
        private TestContentsDataTable tableTestContents;
        
        private QuestionSetsDataTable tableQuestionSets;
        
        private SetsToQuestionsDataTable tableSetsToQuestions;
        
        private CustomTestsDataTable tableCustomTests;
        
        private System.Data.DataRelation relationFK_test_content_tests;
        
        private System.Data.DataRelation relationFK_test_content_question_sets;
        
        private System.Data.DataRelation relationFK_sets_to_questions_question_sets;
        
        private System.Data.DataRelation relationFK_CustomTests_Tests;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TestsDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TestsDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Tests"] != null)) {
                    base.Tables.Add(new TestsDataTable(ds.Tables["Tests"]));
                }
                if ((ds.Tables["TestContents"] != null)) {
                    base.Tables.Add(new TestContentsDataTable(ds.Tables["TestContents"]));
                }
                if ((ds.Tables["QuestionSets"] != null)) {
                    base.Tables.Add(new QuestionSetsDataTable(ds.Tables["QuestionSets"]));
                }
                if ((ds.Tables["SetsToQuestions"] != null)) {
                    base.Tables.Add(new SetsToQuestionsDataTable(ds.Tables["SetsToQuestions"]));
                }
                if ((ds.Tables["CustomTests"] != null)) {
                    base.Tables.Add(new CustomTestsDataTable(ds.Tables["CustomTests"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestsDataTable Tests {
            get {
                return this.tableTests;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestContentsDataTable TestContents {
            get {
                return this.tableTestContents;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuestionSetsDataTable QuestionSets {
            get {
                return this.tableQuestionSets;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SetsToQuestionsDataTable SetsToQuestions {
            get {
                return this.tableSetsToQuestions;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomTestsDataTable CustomTests {
            get {
                return this.tableCustomTests;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            TestsDataSet cln = ((TestsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Tests"] != null)) {
                    base.Tables.Add(new TestsDataTable(ds.Tables["Tests"]));
                }
                if ((ds.Tables["TestContents"] != null)) {
                    base.Tables.Add(new TestContentsDataTable(ds.Tables["TestContents"]));
                }
                if ((ds.Tables["QuestionSets"] != null)) {
                    base.Tables.Add(new QuestionSetsDataTable(ds.Tables["QuestionSets"]));
                }
                if ((ds.Tables["SetsToQuestions"] != null)) {
                    base.Tables.Add(new SetsToQuestionsDataTable(ds.Tables["SetsToQuestions"]));
                }
                if ((ds.Tables["CustomTests"] != null)) {
                    base.Tables.Add(new CustomTestsDataTable(ds.Tables["CustomTests"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTests = ((TestsDataTable)(base.Tables["Tests"]));
            if ((initTable == true)) {
                if ((this.tableTests != null)) {
                    this.tableTests.InitVars();
                }
            }
            this.tableTestContents = ((TestContentsDataTable)(base.Tables["TestContents"]));
            if ((initTable == true)) {
                if ((this.tableTestContents != null)) {
                    this.tableTestContents.InitVars();
                }
            }
            this.tableQuestionSets = ((QuestionSetsDataTable)(base.Tables["QuestionSets"]));
            if ((initTable == true)) {
                if ((this.tableQuestionSets != null)) {
                    this.tableQuestionSets.InitVars();
                }
            }
            this.tableSetsToQuestions = ((SetsToQuestionsDataTable)(base.Tables["SetsToQuestions"]));
            if ((initTable == true)) {
                if ((this.tableSetsToQuestions != null)) {
                    this.tableSetsToQuestions.InitVars();
                }
            }
            this.tableCustomTests = ((CustomTestsDataTable)(base.Tables["CustomTests"]));
            if ((initTable == true)) {
                if ((this.tableCustomTests != null)) {
                    this.tableCustomTests.InitVars();
                }
            }
            this.relationFK_test_content_tests = this.Relations["FK_test_content_tests"];
            this.relationFK_test_content_question_sets = this.Relations["FK_test_content_question_sets"];
            this.relationFK_sets_to_questions_question_sets = this.Relations["FK_sets_to_questions_question_sets"];
            this.relationFK_CustomTests_Tests = this.Relations["FK_CustomTests_Tests"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TestsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TestsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTests = new TestsDataTable();
            base.Tables.Add(this.tableTests);
            this.tableTestContents = new TestContentsDataTable();
            base.Tables.Add(this.tableTestContents);
            this.tableQuestionSets = new QuestionSetsDataTable();
            base.Tables.Add(this.tableQuestionSets);
            this.tableSetsToQuestions = new SetsToQuestionsDataTable();
            base.Tables.Add(this.tableSetsToQuestions);
            this.tableCustomTests = new CustomTestsDataTable();
            base.Tables.Add(this.tableCustomTests);
            this.relationFK_test_content_tests = new System.Data.DataRelation("FK_test_content_tests", new System.Data.DataColumn[] {
                        this.tableTests.IdColumn}, new System.Data.DataColumn[] {
                        this.tableTestContents.TestIdColumn}, false);
            this.Relations.Add(this.relationFK_test_content_tests);
            this.relationFK_test_content_question_sets = new System.Data.DataRelation("FK_test_content_question_sets", new System.Data.DataColumn[] {
                        this.tableQuestionSets.IdColumn}, new System.Data.DataColumn[] {
                        this.tableTestContents.QuestionSetIdColumn}, false);
            this.Relations.Add(this.relationFK_test_content_question_sets);
            this.relationFK_sets_to_questions_question_sets = new System.Data.DataRelation("FK_sets_to_questions_question_sets", new System.Data.DataColumn[] {
                        this.tableQuestionSets.IdColumn}, new System.Data.DataColumn[] {
                        this.tableSetsToQuestions.SetIdColumn}, false);
            this.Relations.Add(this.relationFK_sets_to_questions_question_sets);
            this.relationFK_CustomTests_Tests = new System.Data.DataRelation("FK_CustomTests_Tests", new System.Data.DataColumn[] {
                        this.tableTests.IdColumn}, new System.Data.DataColumn[] {
                        this.tableCustomTests.test_idColumn}, false);
            this.Relations.Add(this.relationFK_CustomTests_Tests);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTests() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestContents() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQuestionSets() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSetsToQuestions() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomTests() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            TestsDataSet ds = new TestsDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void TestsRowChangeEventHandler(object sender, TestsRowChangeEvent e);
        
        public delegate void TestContentsRowChangeEventHandler(object sender, TestContentsRowChangeEvent e);
        
        public delegate void QuestionSetsRowChangeEventHandler(object sender, QuestionSetsRowChangeEvent e);
        
        public delegate void SetsToQuestionsRowChangeEventHandler(object sender, SetsToQuestionsRowChangeEvent e);
        
        public delegate void CustomTestsRowChangeEventHandler(object sender, CustomTestsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnIsPractice;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnQuestionTypeId;
            
            private System.Data.DataColumn columnQuestionSubtypeId;
            
            private System.Data.DataColumn columnGUID;
            
            private System.Data.DataColumn columnVersion;
            
            private System.Data.DataColumn columnrating;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsDataTable() {
                this.TableName = "Tests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsPracticeColumn {
                get {
                    return this.columnIsPractice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionTypeIdColumn {
                get {
                    return this.columnQuestionTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionSubtypeIdColumn {
                get {
                    return this.columnQuestionSubtypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GUIDColumn {
                get {
                    return this.columnGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ratingColumn {
                get {
                    return this.columnrating;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow this[int index] {
                get {
                    return ((TestsRow)(this.Rows[index]));
                }
            }
            
            public event TestsRowChangeEventHandler TestsRowChanging;
            
            public event TestsRowChangeEventHandler TestsRowChanged;
            
            public event TestsRowChangeEventHandler TestsRowDeleting;
            
            public event TestsRowChangeEventHandler TestsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestsRow(TestsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow AddTestsRow(string Name, bool IsPractice, string Description, int QuestionTypeId, int QuestionSubtypeId, string GUID, int Version, int rating) {
                TestsRow rowTestsRow = ((TestsRow)(this.NewRow()));
                rowTestsRow.ItemArray = new object[] {
                        null,
                        Name,
                        IsPractice,
                        Description,
                        QuestionTypeId,
                        QuestionSubtypeId,
                        GUID,
                        Version,
                        rating};
                this.Rows.Add(rowTestsRow);
                return rowTestsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow FindById(int Id) {
                return ((TestsRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TestsDataTable cln = ((TestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TestsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
                this.columnIsPractice = base.Columns["IsPractice"];
                this.columnDescription = base.Columns["Description"];
                this.columnQuestionTypeId = base.Columns["QuestionTypeId"];
                this.columnQuestionSubtypeId = base.Columns["QuestionSubtypeId"];
                this.columnGUID = base.Columns["GUID"];
                this.columnVersion = base.Columns["Version"];
                this.columnrating = base.Columns["rating"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsPractice = new System.Data.DataColumn("IsPractice", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPractice);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnQuestionTypeId = new System.Data.DataColumn("QuestionTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionTypeId);
                this.columnQuestionSubtypeId = new System.Data.DataColumn("QuestionSubtypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionSubtypeId);
                this.columnGUID = new System.Data.DataColumn("GUID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGUID);
                this.columnVersion = new System.Data.DataColumn("Version", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
                this.columnrating = new System.Data.DataColumn("rating", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrating);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 128;
                this.columnIsPractice.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 2147483647;
                this.columnGUID.AllowDBNull = false;
                this.columnGUID.MaxLength = 36;
                this.columnVersion.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow NewTestsRow() {
                return ((TestsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TestsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TestsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestsRowChanged != null)) {
                    this.TestsRowChanged(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestsRowChanging != null)) {
                    this.TestsRowChanging(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestsRowDeleted != null)) {
                    this.TestsRowDeleted(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestsRowDeleting != null)) {
                    this.TestsRowDeleting(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestsRow(TestsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TestsDataSet ds = new TestsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestContentsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTestId;
            
            private System.Data.DataColumn columnQuestionSetId;
            
            private System.Data.DataColumn columnQuestionSetOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestContentsDataTable() {
                this.TableName = "TestContents";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestContentsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestContentsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TestIdColumn {
                get {
                    return this.columnTestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionSetIdColumn {
                get {
                    return this.columnQuestionSetId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionSetOrderColumn {
                get {
                    return this.columnQuestionSetOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestContentsRow this[int index] {
                get {
                    return ((TestContentsRow)(this.Rows[index]));
                }
            }
            
            public event TestContentsRowChangeEventHandler TestContentsRowChanging;
            
            public event TestContentsRowChangeEventHandler TestContentsRowChanged;
            
            public event TestContentsRowChangeEventHandler TestContentsRowDeleting;
            
            public event TestContentsRowChangeEventHandler TestContentsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestContentsRow(TestContentsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestContentsRow AddTestContentsRow(TestsRow parentTestsRowByFK_test_content_tests, QuestionSetsRow parentQuestionSetsRowByFK_test_content_question_sets, byte QuestionSetOrder) {
                TestContentsRow rowTestContentsRow = ((TestContentsRow)(this.NewRow()));
                rowTestContentsRow.ItemArray = new object[] {
                        parentTestsRowByFK_test_content_tests[0],
                        parentQuestionSetsRowByFK_test_content_question_sets[0],
                        QuestionSetOrder};
                this.Rows.Add(rowTestContentsRow);
                return rowTestContentsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestContentsRow FindByTestIdQuestionSetId(int TestId, int QuestionSetId) {
                return ((TestContentsRow)(this.Rows.Find(new object[] {
                            TestId,
                            QuestionSetId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TestContentsDataTable cln = ((TestContentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TestContentsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestId = base.Columns["TestId"];
                this.columnQuestionSetId = base.Columns["QuestionSetId"];
                this.columnQuestionSetOrder = base.Columns["QuestionSetOrder"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestId = new System.Data.DataColumn("TestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestId);
                this.columnQuestionSetId = new System.Data.DataColumn("QuestionSetId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionSetId);
                this.columnQuestionSetOrder = new System.Data.DataColumn("QuestionSetOrder", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionSetOrder);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTestId,
                                this.columnQuestionSetId}, true));
                this.columnTestId.AllowDBNull = false;
                this.columnQuestionSetId.AllowDBNull = false;
                this.columnQuestionSetOrder.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestContentsRow NewTestContentsRow() {
                return ((TestContentsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TestContentsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TestContentsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestContentsRowChanged != null)) {
                    this.TestContentsRowChanged(this, new TestContentsRowChangeEvent(((TestContentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestContentsRowChanging != null)) {
                    this.TestContentsRowChanging(this, new TestContentsRowChangeEvent(((TestContentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestContentsRowDeleted != null)) {
                    this.TestContentsRowDeleted(this, new TestContentsRowChangeEvent(((TestContentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestContentsRowDeleting != null)) {
                    this.TestContentsRowDeleting(this, new TestContentsRowChangeEvent(((TestContentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestContentsRow(TestContentsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TestsDataSet ds = new TestsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestContentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QuestionSetsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnNumberOfQuestionsToPick;
            
            private System.Data.DataColumn columnTimeLimit;
            
            private System.Data.DataColumn columnQuestionTypeId;
            
            private System.Data.DataColumn columnQuestionSubtypeId;
            
            private System.Data.DataColumn columnNumberOfQuestionsInZone1;
            
            private System.Data.DataColumn columnNumberOfQuestionsInZone2;
            
            private System.Data.DataColumn columnNumberOfQuestionsInZone3;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsDataTable() {
                this.TableName = "QuestionSets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuestionSetsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QuestionSetsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfQuestionsToPickColumn {
                get {
                    return this.columnNumberOfQuestionsToPick;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeLimitColumn {
                get {
                    return this.columnTimeLimit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionTypeIdColumn {
                get {
                    return this.columnQuestionTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionSubtypeIdColumn {
                get {
                    return this.columnQuestionSubtypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfQuestionsInZone1Column {
                get {
                    return this.columnNumberOfQuestionsInZone1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfQuestionsInZone2Column {
                get {
                    return this.columnNumberOfQuestionsInZone2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfQuestionsInZone3Column {
                get {
                    return this.columnNumberOfQuestionsInZone3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRow this[int index] {
                get {
                    return ((QuestionSetsRow)(this.Rows[index]));
                }
            }
            
            public event QuestionSetsRowChangeEventHandler QuestionSetsRowChanging;
            
            public event QuestionSetsRowChangeEventHandler QuestionSetsRowChanged;
            
            public event QuestionSetsRowChangeEventHandler QuestionSetsRowDeleting;
            
            public event QuestionSetsRowChangeEventHandler QuestionSetsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQuestionSetsRow(QuestionSetsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRow AddQuestionSetsRow(string Name, string Description, int NumberOfQuestionsToPick, int TimeLimit, int QuestionTypeId, int QuestionSubtypeId, int NumberOfQuestionsInZone1, int NumberOfQuestionsInZone2, int NumberOfQuestionsInZone3) {
                QuestionSetsRow rowQuestionSetsRow = ((QuestionSetsRow)(this.NewRow()));
                rowQuestionSetsRow.ItemArray = new object[] {
                        null,
                        Name,
                        Description,
                        NumberOfQuestionsToPick,
                        TimeLimit,
                        QuestionTypeId,
                        QuestionSubtypeId,
                        NumberOfQuestionsInZone1,
                        NumberOfQuestionsInZone2,
                        NumberOfQuestionsInZone3};
                this.Rows.Add(rowQuestionSetsRow);
                return rowQuestionSetsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRow FindById(int Id) {
                return ((QuestionSetsRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                QuestionSetsDataTable cln = ((QuestionSetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new QuestionSetsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnNumberOfQuestionsToPick = base.Columns["NumberOfQuestionsToPick"];
                this.columnTimeLimit = base.Columns["TimeLimit"];
                this.columnQuestionTypeId = base.Columns["QuestionTypeId"];
                this.columnQuestionSubtypeId = base.Columns["QuestionSubtypeId"];
                this.columnNumberOfQuestionsInZone1 = base.Columns["NumberOfQuestionsInZone1"];
                this.columnNumberOfQuestionsInZone2 = base.Columns["NumberOfQuestionsInZone2"];
                this.columnNumberOfQuestionsInZone3 = base.Columns["NumberOfQuestionsInZone3"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnNumberOfQuestionsToPick = new System.Data.DataColumn("NumberOfQuestionsToPick", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfQuestionsToPick);
                this.columnTimeLimit = new System.Data.DataColumn("TimeLimit", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeLimit);
                this.columnQuestionTypeId = new System.Data.DataColumn("QuestionTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionTypeId);
                this.columnQuestionSubtypeId = new System.Data.DataColumn("QuestionSubtypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionSubtypeId);
                this.columnNumberOfQuestionsInZone1 = new System.Data.DataColumn("NumberOfQuestionsInZone1", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfQuestionsInZone1);
                this.columnNumberOfQuestionsInZone2 = new System.Data.DataColumn("NumberOfQuestionsInZone2", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfQuestionsInZone2);
                this.columnNumberOfQuestionsInZone3 = new System.Data.DataColumn("NumberOfQuestionsInZone3", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfQuestionsInZone3);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 2147483647;
                this.columnNumberOfQuestionsToPick.AllowDBNull = false;
                this.columnNumberOfQuestionsInZone1.AllowDBNull = false;
                this.columnNumberOfQuestionsInZone2.AllowDBNull = false;
                this.columnNumberOfQuestionsInZone3.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRow NewQuestionSetsRow() {
                return ((QuestionSetsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new QuestionSetsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(QuestionSetsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuestionSetsRowChanged != null)) {
                    this.QuestionSetsRowChanged(this, new QuestionSetsRowChangeEvent(((QuestionSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuestionSetsRowChanging != null)) {
                    this.QuestionSetsRowChanging(this, new QuestionSetsRowChangeEvent(((QuestionSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuestionSetsRowDeleted != null)) {
                    this.QuestionSetsRowDeleted(this, new QuestionSetsRowChangeEvent(((QuestionSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuestionSetsRowDeleting != null)) {
                    this.QuestionSetsRowDeleting(this, new QuestionSetsRowChangeEvent(((QuestionSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQuestionSetsRow(QuestionSetsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TestsDataSet ds = new TestsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QuestionSetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SetsToQuestionsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSetId;
            
            private System.Data.DataColumn columnQuestionId;
            
            private System.Data.DataColumn columnQuestionOrder;
            
            private System.Data.DataColumn columnQuestionZone;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetsToQuestionsDataTable() {
                this.TableName = "SetsToQuestions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetsToQuestionsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SetsToQuestionsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SetIdColumn {
                get {
                    return this.columnSetId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionIdColumn {
                get {
                    return this.columnQuestionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionOrderColumn {
                get {
                    return this.columnQuestionOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuestionZoneColumn {
                get {
                    return this.columnQuestionZone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetsToQuestionsRow this[int index] {
                get {
                    return ((SetsToQuestionsRow)(this.Rows[index]));
                }
            }
            
            public event SetsToQuestionsRowChangeEventHandler SetsToQuestionsRowChanging;
            
            public event SetsToQuestionsRowChangeEventHandler SetsToQuestionsRowChanged;
            
            public event SetsToQuestionsRowChangeEventHandler SetsToQuestionsRowDeleting;
            
            public event SetsToQuestionsRowChangeEventHandler SetsToQuestionsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSetsToQuestionsRow(SetsToQuestionsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetsToQuestionsRow AddSetsToQuestionsRow(QuestionSetsRow parentQuestionSetsRowByFK_sets_to_questions_question_sets, int QuestionId, byte QuestionOrder, byte QuestionZone) {
                SetsToQuestionsRow rowSetsToQuestionsRow = ((SetsToQuestionsRow)(this.NewRow()));
                rowSetsToQuestionsRow.ItemArray = new object[] {
                        parentQuestionSetsRowByFK_sets_to_questions_question_sets[0],
                        QuestionId,
                        QuestionOrder,
                        QuestionZone};
                this.Rows.Add(rowSetsToQuestionsRow);
                return rowSetsToQuestionsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetsToQuestionsRow FindBySetIdQuestionId(int SetId, int QuestionId) {
                return ((SetsToQuestionsRow)(this.Rows.Find(new object[] {
                            SetId,
                            QuestionId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SetsToQuestionsDataTable cln = ((SetsToQuestionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SetsToQuestionsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSetId = base.Columns["SetId"];
                this.columnQuestionId = base.Columns["QuestionId"];
                this.columnQuestionOrder = base.Columns["QuestionOrder"];
                this.columnQuestionZone = base.Columns["QuestionZone"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSetId = new System.Data.DataColumn("SetId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetId);
                this.columnQuestionId = new System.Data.DataColumn("QuestionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionId);
                this.columnQuestionOrder = new System.Data.DataColumn("QuestionOrder", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionOrder);
                this.columnQuestionZone = new System.Data.DataColumn("QuestionZone", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionZone);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSetId,
                                this.columnQuestionId}, true));
                this.columnSetId.AllowDBNull = false;
                this.columnQuestionId.AllowDBNull = false;
                this.columnQuestionOrder.AllowDBNull = false;
                this.columnQuestionZone.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetsToQuestionsRow NewSetsToQuestionsRow() {
                return ((SetsToQuestionsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SetsToQuestionsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SetsToQuestionsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SetsToQuestionsRowChanged != null)) {
                    this.SetsToQuestionsRowChanged(this, new SetsToQuestionsRowChangeEvent(((SetsToQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SetsToQuestionsRowChanging != null)) {
                    this.SetsToQuestionsRowChanging(this, new SetsToQuestionsRowChangeEvent(((SetsToQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SetsToQuestionsRowDeleted != null)) {
                    this.SetsToQuestionsRowDeleted(this, new SetsToQuestionsRowChangeEvent(((SetsToQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SetsToQuestionsRowDeleting != null)) {
                    this.SetsToQuestionsRowDeleting(this, new SetsToQuestionsRowChangeEvent(((SetsToQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSetsToQuestionsRow(SetsToQuestionsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TestsDataSet ds = new TestsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SetsToQuestionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomTestsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidx;
            
            private System.Data.DataColumn columntest_id;
            
            private System.Data.DataColumn columnauthor;
            
            private System.Data.DataColumn columnquestions;
            
            private System.Data.DataColumn columncreated;
            
            private System.Data.DataColumn columnenabled;
            
            private System.Data.DataColumn columnhidden;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomTestsDataTable() {
                this.TableName = "CustomTests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomTestsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomTestsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idxColumn {
                get {
                    return this.columnidx;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn test_idColumn {
                get {
                    return this.columntest_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn authorColumn {
                get {
                    return this.columnauthor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn questionsColumn {
                get {
                    return this.columnquestions;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn createdColumn {
                get {
                    return this.columncreated;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn enabledColumn {
                get {
                    return this.columnenabled;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn hiddenColumn {
                get {
                    return this.columnhidden;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomTestsRow this[int index] {
                get {
                    return ((CustomTestsRow)(this.Rows[index]));
                }
            }
            
            public event CustomTestsRowChangeEventHandler CustomTestsRowChanging;
            
            public event CustomTestsRowChangeEventHandler CustomTestsRowChanged;
            
            public event CustomTestsRowChangeEventHandler CustomTestsRowDeleting;
            
            public event CustomTestsRowChangeEventHandler CustomTestsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomTestsRow(CustomTestsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomTestsRow AddCustomTestsRow(TestsRow parentTestsRowByFK_CustomTests_Tests, int author, int questions, System.DateTime created, bool enabled, bool hidden) {
                CustomTestsRow rowCustomTestsRow = ((CustomTestsRow)(this.NewRow()));
                rowCustomTestsRow.ItemArray = new object[] {
                        null,
                        parentTestsRowByFK_CustomTests_Tests[0],
                        author,
                        questions,
                        created,
                        enabled,
                        hidden};
                this.Rows.Add(rowCustomTestsRow);
                return rowCustomTestsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CustomTestsDataTable cln = ((CustomTestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CustomTestsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidx = base.Columns["idx"];
                this.columntest_id = base.Columns["test_id"];
                this.columnauthor = base.Columns["author"];
                this.columnquestions = base.Columns["questions"];
                this.columncreated = base.Columns["created"];
                this.columnenabled = base.Columns["enabled"];
                this.columnhidden = base.Columns["hidden"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidx = new System.Data.DataColumn("idx", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidx);
                this.columntest_id = new System.Data.DataColumn("test_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntest_id);
                this.columnauthor = new System.Data.DataColumn("author", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnauthor);
                this.columnquestions = new System.Data.DataColumn("questions", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnquestions);
                this.columncreated = new System.Data.DataColumn("created", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncreated);
                this.columnenabled = new System.Data.DataColumn("enabled", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnenabled);
                this.columnhidden = new System.Data.DataColumn("hidden", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnhidden);
                this.columnidx.AutoIncrement = true;
                this.columnidx.AllowDBNull = false;
                this.columnidx.ReadOnly = true;
                this.columntest_id.AllowDBNull = false;
                this.columnauthor.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomTestsRow NewCustomTestsRow() {
                return ((CustomTestsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CustomTestsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CustomTestsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomTestsRowChanged != null)) {
                    this.CustomTestsRowChanged(this, new CustomTestsRowChangeEvent(((CustomTestsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomTestsRowChanging != null)) {
                    this.CustomTestsRowChanging(this, new CustomTestsRowChangeEvent(((CustomTestsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomTestsRowDeleted != null)) {
                    this.CustomTestsRowDeleted(this, new CustomTestsRowChangeEvent(((CustomTestsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomTestsRowDeleting != null)) {
                    this.CustomTestsRowDeleting(this, new CustomTestsRowChangeEvent(((CustomTestsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomTestsRow(CustomTestsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TestsDataSet ds = new TestsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomTestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestsRow : System.Data.DataRow {
            
            private TestsDataTable tableTests;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTests = ((TestsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableTests.IdColumn]));
                }
                set {
                    this[this.tableTests.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTests.NameColumn]));
                }
                set {
                    this[this.tableTests.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPractice {
                get {
                    return ((bool)(this[this.tableTests.IsPracticeColumn]));
                }
                set {
                    this[this.tableTests.IsPracticeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableTests.DescriptionColumn]));
                }
                set {
                    this[this.tableTests.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuestionTypeId {
                get {
                    try {
                        return ((int)(this[this.tableTests.QuestionTypeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QuestionTypeId\' in table \'Tests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTests.QuestionTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuestionSubtypeId {
                get {
                    try {
                        return ((int)(this[this.tableTests.QuestionSubtypeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QuestionSubtypeId\' in table \'Tests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTests.QuestionSubtypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GUID {
                get {
                    return ((string)(this[this.tableTests.GUIDColumn]));
                }
                set {
                    this[this.tableTests.GUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Version {
                get {
                    return ((int)(this[this.tableTests.VersionColumn]));
                }
                set {
                    this[this.tableTests.VersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int rating {
                get {
                    try {
                        return ((int)(this[this.tableTests.ratingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'rating\' in table \'Tests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTests.ratingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuestionTypeIdNull() {
                return this.IsNull(this.tableTests.QuestionTypeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuestionTypeIdNull() {
                this[this.tableTests.QuestionTypeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuestionSubtypeIdNull() {
                return this.IsNull(this.tableTests.QuestionSubtypeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuestionSubtypeIdNull() {
                this[this.tableTests.QuestionSubtypeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsratingNull() {
                return this.IsNull(this.tableTests.ratingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetratingNull() {
                this[this.tableTests.ratingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestContentsRow[] GetTestContentsRows() {
                return ((TestContentsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_test_content_tests"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomTestsRow[] GetCustomTestsRows() {
                return ((CustomTestsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CustomTests_Tests"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestContentsRow : System.Data.DataRow {
            
            private TestContentsDataTable tableTestContents;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestContentsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestContents = ((TestContentsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestId {
                get {
                    return ((int)(this[this.tableTestContents.TestIdColumn]));
                }
                set {
                    this[this.tableTestContents.TestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuestionSetId {
                get {
                    return ((int)(this[this.tableTestContents.QuestionSetIdColumn]));
                }
                set {
                    this[this.tableTestContents.QuestionSetIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte QuestionSetOrder {
                get {
                    return ((byte)(this[this.tableTestContents.QuestionSetOrderColumn]));
                }
                set {
                    this[this.tableTestContents.QuestionSetOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow TestsRow {
                get {
                    return ((TestsRow)(this.GetParentRow(this.Table.ParentRelations["FK_test_content_tests"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_test_content_tests"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRow QuestionSetsRow {
                get {
                    return ((QuestionSetsRow)(this.GetParentRow(this.Table.ParentRelations["FK_test_content_question_sets"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_test_content_question_sets"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QuestionSetsRow : System.Data.DataRow {
            
            private QuestionSetsDataTable tableQuestionSets;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuestionSetsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuestionSets = ((QuestionSetsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableQuestionSets.IdColumn]));
                }
                set {
                    this[this.tableQuestionSets.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableQuestionSets.NameColumn]));
                }
                set {
                    this[this.tableQuestionSets.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableQuestionSets.DescriptionColumn]));
                }
                set {
                    this[this.tableQuestionSets.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumberOfQuestionsToPick {
                get {
                    return ((int)(this[this.tableQuestionSets.NumberOfQuestionsToPickColumn]));
                }
                set {
                    this[this.tableQuestionSets.NumberOfQuestionsToPickColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimeLimit {
                get {
                    try {
                        return ((int)(this[this.tableQuestionSets.TimeLimitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeLimit\' in table \'QuestionSets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestionSets.TimeLimitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuestionTypeId {
                get {
                    try {
                        return ((int)(this[this.tableQuestionSets.QuestionTypeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QuestionTypeId\' in table \'QuestionSets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestionSets.QuestionTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuestionSubtypeId {
                get {
                    try {
                        return ((int)(this[this.tableQuestionSets.QuestionSubtypeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QuestionSubtypeId\' in table \'QuestionSets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestionSets.QuestionSubtypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumberOfQuestionsInZone1 {
                get {
                    return ((int)(this[this.tableQuestionSets.NumberOfQuestionsInZone1Column]));
                }
                set {
                    this[this.tableQuestionSets.NumberOfQuestionsInZone1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumberOfQuestionsInZone2 {
                get {
                    return ((int)(this[this.tableQuestionSets.NumberOfQuestionsInZone2Column]));
                }
                set {
                    this[this.tableQuestionSets.NumberOfQuestionsInZone2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumberOfQuestionsInZone3 {
                get {
                    return ((int)(this[this.tableQuestionSets.NumberOfQuestionsInZone3Column]));
                }
                set {
                    this[this.tableQuestionSets.NumberOfQuestionsInZone3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeLimitNull() {
                return this.IsNull(this.tableQuestionSets.TimeLimitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeLimitNull() {
                this[this.tableQuestionSets.TimeLimitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuestionTypeIdNull() {
                return this.IsNull(this.tableQuestionSets.QuestionTypeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuestionTypeIdNull() {
                this[this.tableQuestionSets.QuestionTypeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuestionSubtypeIdNull() {
                return this.IsNull(this.tableQuestionSets.QuestionSubtypeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuestionSubtypeIdNull() {
                this[this.tableQuestionSets.QuestionSubtypeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestContentsRow[] GetTestContentsRows() {
                return ((TestContentsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_test_content_question_sets"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetsToQuestionsRow[] GetSetsToQuestionsRows() {
                return ((SetsToQuestionsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_sets_to_questions_question_sets"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SetsToQuestionsRow : System.Data.DataRow {
            
            private SetsToQuestionsDataTable tableSetsToQuestions;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetsToQuestionsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSetsToQuestions = ((SetsToQuestionsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SetId {
                get {
                    return ((int)(this[this.tableSetsToQuestions.SetIdColumn]));
                }
                set {
                    this[this.tableSetsToQuestions.SetIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuestionId {
                get {
                    return ((int)(this[this.tableSetsToQuestions.QuestionIdColumn]));
                }
                set {
                    this[this.tableSetsToQuestions.QuestionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte QuestionOrder {
                get {
                    return ((byte)(this[this.tableSetsToQuestions.QuestionOrderColumn]));
                }
                set {
                    this[this.tableSetsToQuestions.QuestionOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte QuestionZone {
                get {
                    return ((byte)(this[this.tableSetsToQuestions.QuestionZoneColumn]));
                }
                set {
                    this[this.tableSetsToQuestions.QuestionZoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRow QuestionSetsRow {
                get {
                    return ((QuestionSetsRow)(this.GetParentRow(this.Table.ParentRelations["FK_sets_to_questions_question_sets"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_sets_to_questions_question_sets"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomTestsRow : System.Data.DataRow {
            
            private CustomTestsDataTable tableCustomTests;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomTestsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomTests = ((CustomTestsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idx {
                get {
                    return ((int)(this[this.tableCustomTests.idxColumn]));
                }
                set {
                    this[this.tableCustomTests.idxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int test_id {
                get {
                    return ((int)(this[this.tableCustomTests.test_idColumn]));
                }
                set {
                    this[this.tableCustomTests.test_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int author {
                get {
                    return ((int)(this[this.tableCustomTests.authorColumn]));
                }
                set {
                    this[this.tableCustomTests.authorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int questions {
                get {
                    try {
                        return ((int)(this[this.tableCustomTests.questionsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'questions\' in table \'CustomTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomTests.questionsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime created {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCustomTests.createdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'created\' in table \'CustomTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomTests.createdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool enabled {
                get {
                    try {
                        return ((bool)(this[this.tableCustomTests.enabledColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'enabled\' in table \'CustomTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomTests.enabledColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool hidden {
                get {
                    try {
                        return ((bool)(this[this.tableCustomTests.hiddenColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'hidden\' in table \'CustomTests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomTests.hiddenColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow TestsRow {
                get {
                    return ((TestsRow)(this.GetParentRow(this.Table.ParentRelations["FK_CustomTests_Tests"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CustomTests_Tests"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsquestionsNull() {
                return this.IsNull(this.tableCustomTests.questionsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetquestionsNull() {
                this[this.tableCustomTests.questionsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscreatedNull() {
                return this.IsNull(this.tableCustomTests.createdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcreatedNull() {
                this[this.tableCustomTests.createdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsenabledNull() {
                return this.IsNull(this.tableCustomTests.enabledColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetenabledNull() {
                this[this.tableCustomTests.enabledColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshiddenNull() {
                return this.IsNull(this.tableCustomTests.hiddenColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethiddenNull() {
                this[this.tableCustomTests.hiddenColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestsRowChangeEvent : System.EventArgs {
            
            private TestsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRowChangeEvent(TestsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestContentsRowChangeEvent : System.EventArgs {
            
            private TestContentsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestContentsRowChangeEvent(TestContentsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestContentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QuestionSetsRowChangeEvent : System.EventArgs {
            
            private QuestionSetsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRowChangeEvent(QuestionSetsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestionSetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SetsToQuestionsRowChangeEvent : System.EventArgs {
            
            private SetsToQuestionsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetsToQuestionsRowChangeEvent(SetsToQuestionsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetsToQuestionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomTestsRowChangeEvent : System.EventArgs {
            
            private CustomTestsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomTestsRowChangeEvent(CustomTestsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomTestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace GmatClubTest.BusinessLogic.TestsDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TestsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TestsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Tests";
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("IsPractice", "IsPractice");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("QuestionTypeId", "QuestionTypeId");
            tableMapping.ColumnMappings.Add("QuestionSubtypeId", "QuestionSubtypeId");
            tableMapping.ColumnMappings.Add("GUID", "GUID");
            tableMapping.ColumnMappings.Add("Version", "Version");
            tableMapping.ColumnMappings.Add("rating", "rating");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Tests] WHERE (([Id] = @Original_Id) AND ([Name] = @Original_Name) AND ([IsPractice] = @Original_IsPractice) AND ((@IsNull_QuestionTypeId = 1 AND [QuestionTypeId] IS NULL) OR ([QuestionTypeId] = @Original_QuestionTypeId)) AND ((@IsNull_QuestionSubtypeId = 1 AND [QuestionSubtypeId] IS NULL) OR ([QuestionSubtypeId] = @Original_QuestionSubtypeId)) AND ([GUID] = @Original_GUID) AND ([Version] = @Original_Version) AND ((@IsNull_rating = 1 AND [rating] IS NULL) OR ([rating] = @Original_rating)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsPractice", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPractice", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_QuestionTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionTypeId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_QuestionSubtypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSubtypeId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionSubtypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSubtypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GUID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "GUID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Version", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Version", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_rating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "rating", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_rating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "rating", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Tests] ([Name], [IsPractice], [Description], [QuestionTypeId], [QuestionSubtypeId], [GUID], [Version], [rating]) VALUES (@Name, @IsPractice, @Description, @QuestionTypeId, @QuestionSubtypeId, @GUID, @Version, @rating);
SELECT Id, Name, IsPractice, Description, QuestionTypeId, QuestionSubtypeId, GUID, Version, rating FROM Tests WHERE (Id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsPractice", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPractice", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionSubtypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSubtypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GUID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "GUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Version", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Version", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@rating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "rating", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Tests] SET [Name] = @Name, [IsPractice] = @IsPractice, [Description] = @Description, [QuestionTypeId] = @QuestionTypeId, [QuestionSubtypeId] = @QuestionSubtypeId, [GUID] = @GUID, [Version] = @Version, [rating] = @rating WHERE (([Id] = @Original_Id) AND ([Name] = @Original_Name) AND ([IsPractice] = @Original_IsPractice) AND ((@IsNull_QuestionTypeId = 1 AND [QuestionTypeId] IS NULL) OR ([QuestionTypeId] = @Original_QuestionTypeId)) AND ((@IsNull_QuestionSubtypeId = 1 AND [QuestionSubtypeId] IS NULL) OR ([QuestionSubtypeId] = @Original_QuestionSubtypeId)) AND ([GUID] = @Original_GUID) AND ([Version] = @Original_Version) AND ((@IsNull_rating = 1 AND [rating] IS NULL) OR ([rating] = @Original_rating)));
SELECT Id, Name, IsPractice, Description, QuestionTypeId, QuestionSubtypeId, GUID, Version, rating FROM Tests WHERE (Id = @Id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsPractice", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPractice", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionSubtypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSubtypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GUID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "GUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Version", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Version", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@rating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "rating", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsPractice", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPractice", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_QuestionTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionTypeId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_QuestionSubtypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSubtypeId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionSubtypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSubtypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GUID", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "GUID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Version", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Version", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_rating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "rating", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_rating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "rating", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GmatClubTest.BusinessLogic.Properties.Settings.Default.GmatClubChallengeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, Name, IsPractice, Description, QuestionTypeId, QuestionSubtypeId, GUID" +
                ", Version, rating FROM dbo.Tests";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TestsDataSet.TestsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TestsDataSet.TestsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TestsDataSet.TestsDataTable dataTable = new TestsDataSet.TestsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TestsDataSet.TestsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TestsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Tests");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Id, string Original_Name, bool Original_IsPractice, System.Nullable<int> Original_QuestionTypeId, System.Nullable<int> Original_QuestionSubtypeId, string Original_GUID, int Original_Version, System.Nullable<int> Original_rating) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Id));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_IsPractice));
            if ((Original_QuestionTypeId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_QuestionTypeId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_QuestionSubtypeId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_QuestionSubtypeId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_GUID == null)) {
                throw new System.ArgumentNullException("Original_GUID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_GUID));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Version));
            if ((Original_rating.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_rating.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, bool IsPractice, string Description, System.Nullable<int> QuestionTypeId, System.Nullable<int> QuestionSubtypeId, string GUID, int Version, System.Nullable<int> rating) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(IsPractice));
            if ((Description == null)) {
                throw new System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Description));
            }
            if ((QuestionTypeId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(QuestionTypeId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((QuestionSubtypeId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(QuestionSubtypeId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((GUID == null)) {
                throw new System.ArgumentNullException("GUID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(GUID));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Version));
            if ((rating.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(rating.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Name, 
                    bool IsPractice, 
                    string Description, 
                    System.Nullable<int> QuestionTypeId, 
                    System.Nullable<int> QuestionSubtypeId, 
                    string GUID, 
                    int Version, 
                    System.Nullable<int> rating, 
                    int Original_Id, 
                    string Original_Name, 
                    bool Original_IsPractice, 
                    System.Nullable<int> Original_QuestionTypeId, 
                    System.Nullable<int> Original_QuestionSubtypeId, 
                    string Original_GUID, 
                    int Original_Version, 
                    System.Nullable<int> Original_rating, 
                    int Id) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(IsPractice));
            if ((Description == null)) {
                throw new System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Description));
            }
            if ((QuestionTypeId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(QuestionTypeId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((QuestionSubtypeId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(QuestionSubtypeId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((GUID == null)) {
                throw new System.ArgumentNullException("GUID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(GUID));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Version));
            if ((rating.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(rating.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_Id));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Original_IsPractice));
            if ((Original_QuestionTypeId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_QuestionTypeId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_QuestionSubtypeId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_QuestionSubtypeId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_GUID == null)) {
                throw new System.ArgumentNullException("Original_GUID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_GUID));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_Version));
            if ((Original_rating.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_rating.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TestContentsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TestContentsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TestContents";
            tableMapping.ColumnMappings.Add("TestId", "TestId");
            tableMapping.ColumnMappings.Add("QuestionSetId", "QuestionSetId");
            tableMapping.ColumnMappings.Add("QuestionSetOrder", "QuestionSetOrder");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TestContents] WHERE (([TestId] = @Original_TestId) AND ([Quest" +
                "ionSetId] = @Original_QuestionSetId) AND ([QuestionSetOrder] = @Original_Questio" +
                "nSetOrder))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionSetId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSetId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionSetOrder", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSetOrder", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TestContents] ([TestId], [QuestionSetId], [QuestionSetOrder]) VALUES (@TestId, @QuestionSetId, @QuestionSetOrder);
SELECT TestId, QuestionSetId, QuestionSetOrder FROM TestContents WHERE (QuestionSetId = @QuestionSetId) AND (TestId = @TestId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionSetId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSetId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionSetOrder", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSetOrder", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TestContents] SET [TestId] = @TestId, [QuestionSetId] = @QuestionSetId, [QuestionSetOrder] = @QuestionSetOrder WHERE (([TestId] = @Original_TestId) AND ([QuestionSetId] = @Original_QuestionSetId) AND ([QuestionSetOrder] = @Original_QuestionSetOrder));
SELECT TestId, QuestionSetId, QuestionSetOrder FROM TestContents WHERE (QuestionSetId = @QuestionSetId) AND (TestId = @TestId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionSetId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSetId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionSetOrder", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSetOrder", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionSetId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSetId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionSetOrder", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSetOrder", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GmatClubTest.BusinessLogic.Properties.Settings.Default.GmatClubChallengeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestId, QuestionSetId, QuestionSetOrder FROM dbo.TestContents";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TestsDataSet.TestContentsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TestsDataSet.TestContentsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TestsDataSet.TestContentsDataTable dataTable = new TestsDataSet.TestContentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TestsDataSet.TestContentsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TestsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TestContents");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_TestId, int Original_QuestionSetId, byte Original_QuestionSetOrder) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_TestId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_QuestionSetId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((byte)(Original_QuestionSetOrder));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int TestId, int QuestionSetId, byte QuestionSetOrder) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(TestId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(QuestionSetId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((byte)(QuestionSetOrder));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int TestId, int QuestionSetId, byte QuestionSetOrder, int Original_TestId, int Original_QuestionSetId, byte Original_QuestionSetOrder) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(TestId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(QuestionSetId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((byte)(QuestionSetOrder));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_TestId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_QuestionSetId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((byte)(Original_QuestionSetOrder));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QuestionSetsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public QuestionSetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "QuestionSets";
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("NumberOfQuestionsToPick", "NumberOfQuestionsToPick");
            tableMapping.ColumnMappings.Add("TimeLimit", "TimeLimit");
            tableMapping.ColumnMappings.Add("QuestionTypeId", "QuestionTypeId");
            tableMapping.ColumnMappings.Add("QuestionSubtypeId", "QuestionSubtypeId");
            tableMapping.ColumnMappings.Add("NumberOfQuestionsInZone1", "NumberOfQuestionsInZone1");
            tableMapping.ColumnMappings.Add("NumberOfQuestionsInZone2", "NumberOfQuestionsInZone2");
            tableMapping.ColumnMappings.Add("NumberOfQuestionsInZone3", "NumberOfQuestionsInZone3");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[QuestionSets] WHERE (([Id] = @Original_Id) AND ([Name] = @Original_Name) AND ([NumberOfQuestionsToPick] = @Original_NumberOfQuestionsToPick) AND ((@IsNull_TimeLimit = 1 AND [TimeLimit] IS NULL) OR ([TimeLimit] = @Original_TimeLimit)) AND ((@IsNull_QuestionTypeId = 1 AND [QuestionTypeId] IS NULL) OR ([QuestionTypeId] = @Original_QuestionTypeId)) AND ((@IsNull_QuestionSubtypeId = 1 AND [QuestionSubtypeId] IS NULL) OR ([QuestionSubtypeId] = @Original_QuestionSubtypeId)) AND ([NumberOfQuestionsInZone1] = @Original_NumberOfQuestionsInZone1) AND ([NumberOfQuestionsInZone2] = @Original_NumberOfQuestionsInZone2) AND ([NumberOfQuestionsInZone3] = @Original_NumberOfQuestionsInZone3))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumberOfQuestionsToPick", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsToPick", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_TimeLimit", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeLimit", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeLimit", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeLimit", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_QuestionTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionTypeId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_QuestionSubtypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSubtypeId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionSubtypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSubtypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumberOfQuestionsInZone1", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsInZone1", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumberOfQuestionsInZone2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsInZone2", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumberOfQuestionsInZone3", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsInZone3", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[QuestionSets] ([Name], [Description], [NumberOfQuestionsToPick], [TimeLimit], [QuestionTypeId], [QuestionSubtypeId], [NumberOfQuestionsInZone1], [NumberOfQuestionsInZone2], [NumberOfQuestionsInZone3]) VALUES (@Name, @Description, @NumberOfQuestionsToPick, @TimeLimit, @QuestionTypeId, @QuestionSubtypeId, @NumberOfQuestionsInZone1, @NumberOfQuestionsInZone2, @NumberOfQuestionsInZone3);
SELECT Id, Name, Description, NumberOfQuestionsToPick, TimeLimit, QuestionTypeId, QuestionSubtypeId, NumberOfQuestionsInZone1, NumberOfQuestionsInZone2, NumberOfQuestionsInZone3 FROM QuestionSets WHERE (Id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumberOfQuestionsToPick", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsToPick", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeLimit", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeLimit", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionSubtypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSubtypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumberOfQuestionsInZone1", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsInZone1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumberOfQuestionsInZone2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsInZone2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumberOfQuestionsInZone3", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsInZone3", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[QuestionSets] SET [Name] = @Name, [Description] = @Description, [NumberOfQuestionsToPick] = @NumberOfQuestionsToPick, [TimeLimit] = @TimeLimit, [QuestionTypeId] = @QuestionTypeId, [QuestionSubtypeId] = @QuestionSubtypeId, [NumberOfQuestionsInZone1] = @NumberOfQuestionsInZone1, [NumberOfQuestionsInZone2] = @NumberOfQuestionsInZone2, [NumberOfQuestionsInZone3] = @NumberOfQuestionsInZone3 WHERE (([Id] = @Original_Id) AND ([Name] = @Original_Name) AND ([NumberOfQuestionsToPick] = @Original_NumberOfQuestionsToPick) AND ((@IsNull_TimeLimit = 1 AND [TimeLimit] IS NULL) OR ([TimeLimit] = @Original_TimeLimit)) AND ((@IsNull_QuestionTypeId = 1 AND [QuestionTypeId] IS NULL) OR ([QuestionTypeId] = @Original_QuestionTypeId)) AND ((@IsNull_QuestionSubtypeId = 1 AND [QuestionSubtypeId] IS NULL) OR ([QuestionSubtypeId] = @Original_QuestionSubtypeId)) AND ([NumberOfQuestionsInZone1] = @Original_NumberOfQuestionsInZone1) AND ([NumberOfQuestionsInZone2] = @Original_NumberOfQuestionsInZone2) AND ([NumberOfQuestionsInZone3] = @Original_NumberOfQuestionsInZone3));
SELECT Id, Name, Description, NumberOfQuestionsToPick, TimeLimit, QuestionTypeId, QuestionSubtypeId, NumberOfQuestionsInZone1, NumberOfQuestionsInZone2, NumberOfQuestionsInZone3 FROM QuestionSets WHERE (Id = @Id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumberOfQuestionsToPick", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsToPick", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeLimit", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeLimit", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionSubtypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSubtypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumberOfQuestionsInZone1", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsInZone1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumberOfQuestionsInZone2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsInZone2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumberOfQuestionsInZone3", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsInZone3", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumberOfQuestionsToPick", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsToPick", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_TimeLimit", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeLimit", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeLimit", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeLimit", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_QuestionTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionTypeId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_QuestionSubtypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSubtypeId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionSubtypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionSubtypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumberOfQuestionsInZone1", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsInZone1", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumberOfQuestionsInZone2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsInZone2", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumberOfQuestionsInZone3", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumberOfQuestionsInZone3", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "Id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GmatClubTest.BusinessLogic.Properties.Settings.Default.GmatClubChallengeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, Name, Description, NumberOfQuestionsToPick, TimeLimit, QuestionTypeId," +
                " QuestionSubtypeId, NumberOfQuestionsInZone1, NumberOfQuestionsInZone2, NumberOf" +
                "QuestionsInZone3 FROM dbo.QuestionSets";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TestsDataSet.QuestionSetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TestsDataSet.QuestionSetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TestsDataSet.QuestionSetsDataTable dataTable = new TestsDataSet.QuestionSetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TestsDataSet.QuestionSetsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TestsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "QuestionSets");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Id, string Original_Name, int Original_NumberOfQuestionsToPick, System.Nullable<int> Original_TimeLimit, System.Nullable<int> Original_QuestionTypeId, System.Nullable<int> Original_QuestionSubtypeId, int Original_NumberOfQuestionsInZone1, int Original_NumberOfQuestionsInZone2, int Original_NumberOfQuestionsInZone3) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Id));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_NumberOfQuestionsToPick));
            if ((Original_TimeLimit.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_TimeLimit.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_QuestionTypeId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_QuestionTypeId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_QuestionSubtypeId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_QuestionSubtypeId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_NumberOfQuestionsInZone1));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_NumberOfQuestionsInZone2));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_NumberOfQuestionsInZone3));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, string Description, int NumberOfQuestionsToPick, System.Nullable<int> TimeLimit, System.Nullable<int> QuestionTypeId, System.Nullable<int> QuestionSubtypeId, int NumberOfQuestionsInZone1, int NumberOfQuestionsInZone2, int NumberOfQuestionsInZone3) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((Description == null)) {
                throw new System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Description));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(NumberOfQuestionsToPick));
            if ((TimeLimit.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(TimeLimit.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((QuestionTypeId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(QuestionTypeId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((QuestionSubtypeId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(QuestionSubtypeId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(NumberOfQuestionsInZone1));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(NumberOfQuestionsInZone2));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(NumberOfQuestionsInZone3));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Name, 
                    string Description, 
                    int NumberOfQuestionsToPick, 
                    System.Nullable<int> TimeLimit, 
                    System.Nullable<int> QuestionTypeId, 
                    System.Nullable<int> QuestionSubtypeId, 
                    int NumberOfQuestionsInZone1, 
                    int NumberOfQuestionsInZone2, 
                    int NumberOfQuestionsInZone3, 
                    int Original_Id, 
                    string Original_Name, 
                    int Original_NumberOfQuestionsToPick, 
                    System.Nullable<int> Original_TimeLimit, 
                    System.Nullable<int> Original_QuestionTypeId, 
                    System.Nullable<int> Original_QuestionSubtypeId, 
                    int Original_NumberOfQuestionsInZone1, 
                    int Original_NumberOfQuestionsInZone2, 
                    int Original_NumberOfQuestionsInZone3, 
                    int Id) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((Description == null)) {
                throw new System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(NumberOfQuestionsToPick));
            if ((TimeLimit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(TimeLimit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((QuestionTypeId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(QuestionTypeId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((QuestionSubtypeId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(QuestionSubtypeId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(NumberOfQuestionsInZone1));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(NumberOfQuestionsInZone2));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(NumberOfQuestionsInZone3));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_Id));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_NumberOfQuestionsToPick));
            if ((Original_TimeLimit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_TimeLimit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((Original_QuestionTypeId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_QuestionTypeId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((Original_QuestionSubtypeId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_QuestionSubtypeId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_NumberOfQuestionsInZone1));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_NumberOfQuestionsInZone2));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_NumberOfQuestionsInZone3));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SetsToQuestionsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SetsToQuestionsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SetsToQuestions";
            tableMapping.ColumnMappings.Add("SetId", "SetId");
            tableMapping.ColumnMappings.Add("QuestionId", "QuestionId");
            tableMapping.ColumnMappings.Add("QuestionOrder", "QuestionOrder");
            tableMapping.ColumnMappings.Add("QuestionZone", "QuestionZone");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SetsToQuestions] WHERE (([SetId] = @Original_SetId) AND ([Ques" +
                "tionId] = @Original_QuestionId) AND ([QuestionOrder] = @Original_QuestionOrder) " +
                "AND ([QuestionZone] = @Original_QuestionZone))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SetId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SetId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionOrder", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionOrder", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionZone", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionZone", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[SetsToQuestions] ([SetId], [QuestionId], [QuestionOrder], [QuestionZone]) VALUES (@SetId, @QuestionId, @QuestionOrder, @QuestionZone);
SELECT SetId, QuestionId, QuestionOrder, QuestionZone FROM SetsToQuestions WHERE (QuestionId = @QuestionId) AND (SetId = @SetId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SetId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SetId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionOrder", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionOrder", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionZone", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionZone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SetsToQuestions] SET [SetId] = @SetId, [QuestionId] = @QuestionId, [QuestionOrder] = @QuestionOrder, [QuestionZone] = @QuestionZone WHERE (([SetId] = @Original_SetId) AND ([QuestionId] = @Original_QuestionId) AND ([QuestionOrder] = @Original_QuestionOrder) AND ([QuestionZone] = @Original_QuestionZone));
SELECT SetId, QuestionId, QuestionOrder, QuestionZone FROM SetsToQuestions WHERE (QuestionId = @QuestionId) AND (SetId = @SetId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SetId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SetId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionOrder", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionOrder", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuestionZone", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionZone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SetId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SetId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionOrder", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionOrder", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QuestionZone", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "QuestionZone", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GmatClubTest.BusinessLogic.Properties.Settings.Default.GmatClubChallengeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SetId, QuestionId, QuestionOrder, QuestionZone FROM dbo.SetsToQuestions";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TestsDataSet.SetsToQuestionsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TestsDataSet.SetsToQuestionsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TestsDataSet.SetsToQuestionsDataTable dataTable = new TestsDataSet.SetsToQuestionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TestsDataSet.SetsToQuestionsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TestsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SetsToQuestions");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SetId, int Original_QuestionId, byte Original_QuestionOrder, byte Original_QuestionZone) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SetId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_QuestionId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((byte)(Original_QuestionOrder));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((byte)(Original_QuestionZone));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SetId, int QuestionId, byte QuestionOrder, byte QuestionZone) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SetId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(QuestionId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((byte)(QuestionOrder));
            this.Adapter.InsertCommand.Parameters[3].Value = ((byte)(QuestionZone));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SetId, int QuestionId, byte QuestionOrder, byte QuestionZone, int Original_SetId, int Original_QuestionId, byte Original_QuestionOrder, byte Original_QuestionZone) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SetId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(QuestionId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((byte)(QuestionOrder));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((byte)(QuestionZone));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_SetId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_QuestionId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((byte)(Original_QuestionOrder));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((byte)(Original_QuestionZone));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CustomTestsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CustomTestsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CustomTests";
            tableMapping.ColumnMappings.Add("idx", "idx");
            tableMapping.ColumnMappings.Add("test_id", "test_id");
            tableMapping.ColumnMappings.Add("author", "author");
            tableMapping.ColumnMappings.Add("questions", "questions");
            tableMapping.ColumnMappings.Add("created", "created");
            tableMapping.ColumnMappings.Add("enabled", "enabled");
            tableMapping.ColumnMappings.Add("hidden", "hidden");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [CustomTests] ([test_id], [author], [questions], [created], [enabled]" +
                ", [hidden]) VALUES (@test_id, @author, @questions, @created, @enabled, @hidden)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@test_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "test_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@author", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "author", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@questions", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "questions", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@created", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "created", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enabled", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "enabled", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@hidden", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "hidden", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GmatClubTest.BusinessLogic.Properties.Settings.Default.GmatClubChallengeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CustomTests.* FROM CustomTests";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TestsDataSet.CustomTestsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TestsDataSet.CustomTestsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TestsDataSet.CustomTestsDataTable dataTable = new TestsDataSet.CustomTestsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TestsDataSet.CustomTestsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TestsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CustomTests");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int test_id, int author, System.Nullable<int> questions, System.Nullable<System.DateTime> created, System.Nullable<bool> enabled, System.Nullable<bool> hidden) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(test_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(author));
            if ((questions.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(questions.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((created.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(created.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((enabled.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(enabled.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((hidden.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(hidden.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591